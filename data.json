
{"children": [["widgets", {"type": "module", "children": [["LICENSE", {"type": "value", "name": "LICENSE", "id": "widgets.LICENSE"}], ["$", {"type": "value", "name": "$", "id": "widgets.$"}], ["LOCALE", {"type": "value", "name": "LOCALE", "id": "widgets.LOCALE"}], ["FALLBACK_LOCALE", {"type": "value", "name": "FALLBACK_LOCALE", "id": "widgets.FALLBACK_LOCALE"}], ["TRANSLATIONS", {"type": "value", "name": "TRANSLATIONS", "id": "widgets.TRANSLATIONS"}], ["CACHE", {"type": "value", "name": "CACHE", "id": "widgets.CACHE"}], ["HANDLERS", {"type": "value", "name": "HANDLERS", "id": "widgets.HANDLERS"}], ["COMPLETIONS", {"type": "value", "name": "COMPLETIONS", "id": "widgets.COMPLETIONS"}], ["NOTHING", {"type": "value", "name": "NOTHING", "id": "widgets.NOTHING"}], ["DEFAULT", {"type": "value", "name": "DEFAULT", "id": "widgets.DEFAULT"}], ["EXTRACTORS", {"type": "value", "name": "EXTRACTORS", "id": "widgets.EXTRACTORS"}], ["FORMATTERS", {"type": "value", "name": "FORMATTERS", "id": "widgets.FORMATTERS"}], ["VALIDATORS", {"type": "value", "name": "VALIDATORS", "id": "widgets.VALIDATORS"}], ["T", {"tags": ["function"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='70'><p class='TEXTO N2' ostart='0' oend='70'>A function that can be used to translate messages to the given locale.</p></div>\n\t\n\t", "relations": [["arguments", ["message", "locale"]]], "representation": "<span class='name'>T</span><span class='arguments'><span class='argument'>message</span><span class='argument'>locale</span></span>", "type": "function", "id": "widgets.T"}], ["mergeTranslations", {"representation": "<span class='name'>mergeTranslations</span><span class='arguments'><span class='argument'>translations</span></span>", "type": "function", "id": "widgets.mergeTranslations", "relations": [["arguments", ["translations"]]], "tags": ["function"]}], ["translate", {"representation": "<span class='name'>translate</span><span class='arguments'><span class='argument'>ui</span><span class='argument'>locale</span></span>", "type": "function", "id": "widgets.translate", "relations": [["arguments", ["ui", "locale"]]], "tags": ["function"]}], ["mergeFormats", {"representation": "<span class='name'>mergeFormats</span><span class='arguments'><span class='argument'>formats</span></span>", "type": "function", "id": "widgets.mergeFormats", "relations": [["arguments", ["formats"]]], "tags": ["function"]}], ["format", {"representation": "<span class='name'>format</span><span class='arguments'><span class='argument'>value</span><span class='argument'>formatter</span><span class='argument'>field</span></span>", "type": "function", "id": "widgets.format", "relations": [["arguments", ["value", "formatter", "field"]]], "tags": ["function"]}], ["validate", {"representation": "<span class='name'>validate</span><span class='arguments'><span class='argument'>value</span><span class='argument'>validator</span><span class='argument'>field</span></span>", "type": "function", "id": "widgets.validate", "relations": [["arguments", ["value", "validator", "field"]]], "tags": ["function"]}], ["mergeExtractors", {"representation": "<span class='name'>mergeExtractors</span><span class='arguments'><span class='argument'>extractors</span></span>", "type": "function", "id": "widgets.mergeExtractors", "relations": [["arguments", ["extractors"]]], "tags": ["function"]}], ["extract", {"representation": "<span class='name'>extract</span><span class='arguments'><span class='argument'>value</span><span class='argument'>extractor</span><span class='argument'>field</span></span>", "type": "function", "id": "widgets.extract", "relations": [["arguments", ["value", "extractor", "field"]]], "tags": ["function"]}], ["has", {"tags": ["function"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='61'><p class='TEXTO N2' ostart='0' oend='61'>Tells if there is a widget associated with the given selector</p></div>\n\t\n\t", "relations": [["arguments", ["selector"]]], "representation": "<span class='name'>has</span><span class='arguments'><span class='argument'>selector</span></span>", "type": "function", "id": "widgets.has"}], ["get", {"tags": ["function"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='53'><p class='TEXTO N2' ostart='0' oend='53'>Returns the widget associated with the given selector</p></div>\n\t\n\t", "relations": [["arguments", ["selector"]]], "representation": "<span class='name'>get</span><span class='arguments'><span class='argument'>selector</span></span>", "type": "function", "id": "widgets.get"}], ["ensure", {"tags": ["function"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='30'><p class='TEXTO N2' ostart='0' oend='30'>Ensures that the widget exists</p></div>\n\t\n\t", "relations": [["arguments", ["selector", "widgetClass"]]], "representation": "<span class='name'>ensure</span><span class='arguments'><span class='argument'>selector</span><span class='argument'>widgetClass</span></span>", "type": "function", "id": "widgets.ensure"}], ["asNode", {"tags": ["function"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='49'><p class='TEXTO N2' ostart='0' oend='49'>Ensures the given selection/element is an element</p></div>\n\t\n\t", "relations": [["arguments", ["node", "index"]]], "representation": "<span class='name'>asNode</span><span class='arguments'><span class='argument'>node</span><span class='argument'>index</span></span>", "type": "function", "id": "widgets.asNode"}], ["asElement", {"tags": ["function"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='49'><p class='TEXTO N2' ostart='0' oend='49'>Ensures the given selection/element is an element</p></div>\n\t\n\t", "relations": [["arguments", ["element", "index"]]], "representation": "<span class='name'>asElement</span><span class='arguments'><span class='argument'>element</span><span class='argument'>index</span></span>", "type": "function", "id": "widgets.asElement"}], ["asElements", {"representation": "<span class='name'>asElements</span><span class='arguments'><span class='argument'>element</span><span class='argument'>unwrap</span></span>", "type": "function", "id": "widgets.asElements", "relations": [["arguments", ["element", "unwrap"]]], "tags": ["function"]}], ["asSelection", {"tags": ["function"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='45'><p class='TEXTO N2' ostart='0' oend='45'>Ensures that the given element is a selection</p></div>\n\t\n\t", "relations": [["arguments", ["element"]]], "representation": "<span class='name'>asSelection</span><span class='arguments'><span class='argument'>element</span></span>", "type": "function", "id": "widgets.asSelection"}], ["isElement", {"tags": ["function"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='38'><p class='TEXTO N2' ostart='0' oend='38'>Tells if the given value is an element</p></div>\n\t\n\t", "relations": [["arguments", ["element"]]], "representation": "<span class='name'>isElement</span><span class='arguments'><span class='argument'>element</span></span>", "type": "function", "id": "widgets.isElement"}], ["isNode", {"tags": ["function"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='34'><p class='TEXTO N2' ostart='0' oend='34'>Tells if the given value is a node</p></div>\n\t\n\t", "relations": [["arguments", ["element"]]], "representation": "<span class='name'>isNode</span><span class='arguments'><span class='argument'>element</span></span>", "type": "function", "id": "widgets.isNode"}], ["isSelection", {"tags": ["function"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='36'><p class='TEXTO N2' ostart='0' oend='36'>Tells if the given value is iterable</p></div>\n\t\n\t", "relations": [["arguments", ["value"]]], "representation": "<span class='name'>isSelection</span><span class='arguments'><span class='argument'>value</span></span>", "type": "function", "id": "widgets.isSelection"}], ["bindEvent", {"tags": ["function"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='94'><p class='TEXTO N2' ostart='0' oend='94'>Binds the given <code>event</code> (either a string or a map of string -&gt; callback) to the given context.</p></div>\n\t\n\t", "relations": [["arguments", ["context", "event", "callback", "capture"]]], "representation": "<span class='name'>bindEvent</span><span class='arguments'><span class='argument'>context</span><span class='argument'>event</span><span class='argument'>callback</span><span class='argument'>capture</span></span>", "type": "function", "id": "widgets.bindEvent"}], ["triggerEvent", {"tags": ["function"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='58'><p class='TEXTO N2' ostart='0' oend='58'>Triggers the given <code>event</code> with the given value and source</p></div>\n\t\n\t", "relations": [["arguments", ["context", "event", "value", "source"]]], "representation": "<span class='name'>triggerEvent</span><span class='arguments'><span class='argument'>context</span><span class='argument'>event</span><span class='argument'>value</span><span class='argument'>source</span></span>", "type": "function", "id": "widgets.triggerEvent"}], ["_extractSelector", {"tags": ["function"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='74'><p class='TEXTO N2' ostart='0' oend='74'>Utility function to extract the selector from the given selection, if any.</p></div>\n\t\n\t", "relations": [["arguments", ["selector"]]], "representation": "<span class='name'>_extractSelector</span><span class='arguments'><span class='argument'>selector</span></span>", "type": "function", "id": "widgets._extractSelector"}], ["context", {"tags": ["function"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='66'><p class='TEXTO N2' ostart='0' oend='66'>Returns/ensures the visualization context for the given selection.</p></div>\n\t\n\t", "relations": [["arguments", ["nui"]]], "representation": "<span class='name'>context</span><span class='arguments'><span class='argument'>nui</span></span>", "type": "function", "id": "widgets.context"}], ["hasContext", {"representation": "<span class='name'>hasContext</span><span class='arguments'><span class='argument'>nui</span></span>", "type": "function", "id": "widgets.hasContext", "relations": [["arguments", ["nui"]]], "tags": ["function"]}], ["visualize", {"tags": ["function"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='454'><p class='TEXTO N2' ostart='0' oend='387'>Iterates on the given data, calling onCreate if the data was not there before, onUpdate if the data was already there or onRemove if the data was removed. <code>onCreate</code> takes (<code>context</code>, <code>data element</code>, <code>key</code>), <code>onUpdate</code> takes (<code>context</code>, <code>data element</code>, <code>key</code>, <code>interface element</code>) <code>onRemove</code> takes (<code>context</code>, <code>key</code>, <code>interface element</code>) where <code>onCreate</code> returns the <code>interface element</code>.</p><p class='TEXTO N18' ostart='389' oend='454'>This process is similar to D3's select/enter/update/exit process.</p></div>\n\t\n\t", "relations": [["arguments", ["context", "data", "onCreate", "onUpdate", "onRemove"]]], "representation": "<span class='name'>visualize</span><span class='arguments'><span class='argument'>context</span><span class='argument'>data</span><span class='argument'>onCreate</span><span class='argument'>onUpdate</span><span class='argument'>onRemove</span></span>", "type": "function", "id": "widgets.visualize"}], ["Element", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='197'><p class='TEXTO N2' ostart='0' oend='197'>Elements are (generally) non-interactive data elements that are used throughout the interface. Elements have fields where information can be gathered (input) and/or displayed to the user (outputs).</p></div>\n\t\n\t", "type": "class", "children": [["COUNT", {"id": "widgets.Element.COUNT", "type": "value", "name": "COUNT", "tags": ["class attribute"]}], ["SELECTOR", {"id": "widgets.Element.SELECTOR", "type": "value", "name": "SELECTOR", "tags": ["class attribute"]}], ["STATES", {"id": "widgets.Element.STATES", "type": "value", "name": "STATES", "tags": ["class attribute"]}], ["inputs", {"type": "value", "name": "inputs", "id": "widgets.Element.inputs"}], ["outputs", {"type": "value", "name": "outputs", "id": "widgets.Element.outputs"}], ["fields", {"type": "value", "name": "fields", "id": "widgets.Element.fields"}], ["states", {"type": "value", "name": "states", "id": "widgets.Element.states"}], ["tweens", {"type": "value", "name": "tweens", "id": "widgets.Element.tweens"}], ["uis", {"type": "value", "name": "uis", "id": "widgets.Element.uis"}], ["id", {"type": "value", "name": "id", "id": "widgets.Element.id"}], ["data", {"type": "value", "name": "data", "id": "widgets.Element.data"}], ["ui", {"type": "value", "name": "ui", "id": "widgets.Element.ui"}], ["Bind", {"representation": "<span class='name'>Bind</span><span class='arguments'><span class='argument'>selector</span></span>", "type": "function", "id": "widgets.Element.Bind", "relations": [["arguments", ["selector"]]], "tags": ["class method"]}], ["BindAll", {"representation": "<span class='name'>BindAll</span><span class='arguments'></span>", "type": "function", "id": "widgets.Element.BindAll", "relations": [["arguments", []]], "tags": ["class method"]}], ["Has", {"representation": "<span class='name'>Has</span><span class='arguments'><span class='argument'>selector</span></span>", "type": "function", "id": "widgets.Element.Has", "relations": [["arguments", ["selector"]]], "tags": ["class method"]}], ["Get", {"representation": "<span class='name'>Get</span><span class='arguments'><span class='argument'>selector</span></span>", "type": "function", "id": "widgets.Element.Get", "relations": [["arguments", ["selector"]]], "tags": ["class method"]}], ["Serialize", {"representation": "<span class='name'>Serialize</span><span class='arguments'><span class='argument'>selector</span></span>", "type": "function", "id": "widgets.Element.Serialize", "relations": [["arguments", ["selector"]]], "tags": ["class method"]}], ["SelectorName", {"representation": "<span class='name'>SelectorName</span><span class='arguments'></span>", "type": "function", "id": "widgets.Element.SelectorName", "relations": [["arguments", []]], "tags": ["class method"]}], ["ResetFieldValue", {"representation": "<span class='name'>ResetFieldValue</span><span class='arguments'><span class='argument'>field</span></span>", "type": "function", "id": "widgets.Element.ResetFieldValue", "relations": [["arguments", ["field"]]], "tags": ["class method"]}], ["GetFieldValue", {"representation": "<span class='name'>GetFieldValue</span><span class='arguments'><span class='argument'>field</span><span class='argument'>useExtractor</span></span>", "type": "function", "id": "widgets.Element.GetFieldValue", "relations": [["arguments", ["field", "useExtractor"]]], "tags": ["class method"]}], ["SetFieldValue", {"representation": "<span class='name'>SetFieldValue</span><span class='arguments'><span class='argument'>field</span><span class='argument'>value</span><span class='argument'>useFormatter</span></span>", "type": "function", "id": "widgets.Element.SetFieldValue", "relations": [["arguments", ["field", "value", "useFormatter"]]], "tags": ["class method"]}], ["__init__", {"tags": ["class constructor"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='49'><p class='TEXTO N2' ostart='0' oend='49'>Creates a new <code>Element</code> from the given <code>selector</code></p></div>\n\t\n\t", "relations": [["arguments", ["selector"]]], "representation": "<span class='name'>__init__</span><span class='arguments'><span class='argument'>selector</span></span>", "type": "function", "id": "widgets.Element.__init__"}], ["remove", {"representation": "<span class='name'>remove</span><span class='arguments'><span class='argument'>removeUI</span></span>", "type": "function", "id": "widgets.Element.remove", "relations": [["arguments", ["removeUI"]]], "tags": ["method"]}], ["resetStates", {"representation": "<span class='name'>resetStates</span><span class='arguments'></span>", "type": "function", "id": "widgets.Element.resetStates", "relations": [["arguments", []]], "tags": ["method"]}], ["reset", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='40'><p class='TEXTO N2' ostart='0' oend='40'>Resets the fields to their default value</p></div>\n\t\n\t", "relations": [["arguments", []]], "representation": "<span class='name'>reset</span><span class='arguments'></span>", "type": "function", "id": "widgets.Element.reset"}], ["isSelectorInWidget", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='213'><p class='TEXTO N2' ostart='0' oend='213'>Tells if the selector is within this widget, exlcuding its children. If <code>anyWidget</code> is true, then it will match any widget. The <code>implicit</code> mode will detect widgets that are not explicitely declared with <code>.widget</code>.</p></div>\n\t\n\t", "relations": [["arguments", ["selector", "anyWidget", "implicit"]]], "representation": "<span class='name'>isSelectorInWidget</span><span class='arguments'><span class='argument'>selector</span><span class='argument'>anyWidget</span><span class='argument'>implicit</span></span>", "type": "function", "id": "widgets.Element.isSelectorInWidget"}], ["isSelectorInTemplate", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='96'><p class='TEXTO N2' ostart='0' oend='96'>If the element/widget has &ldquo;<span class='quote'>actual</span>&rdquo;, then we don't need to test if it's within a template or not.</p></div>\n\t\n\t", "relations": [["arguments", ["selector"]]], "representation": "<span class='name'>isSelectorInTemplate</span><span class='arguments'><span class='argument'>selector</span></span>", "type": "function", "id": "widgets.Element.isSelectorInTemplate"}], ["setData", {"representation": "<span class='name'>setData</span><span class='arguments'><span class='argument'>data</span></span>", "type": "function", "id": "widgets.Element.setData", "relations": [["arguments", ["data"]]], "tags": ["method"]}], ["getData", {"representation": "<span class='name'>getData</span><span class='arguments'></span>", "type": "function", "id": "widgets.Element.getData", "relations": [["arguments", []]], "tags": ["method"]}], ["updateData", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='139'><p class='TEXTO N2' ostart='0' oend='139'>A method that can be redefined to do specific handling when the data is update. The given update should only be the new values (dictionary)</p></div>\n\t\n\t", "relations": [["arguments", ["dataUpdate"]]], "representation": "<span class='name'>updateData</span><span class='arguments'><span class='argument'>dataUpdate</span></span>", "type": "function", "id": "widgets.Element.updateData"}], ["relayout", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='81'><p class='TEXTO N2' ostart='0' oend='81'>Can be overriden by children to reformat the element when the layout has changed.</p></div>\n\t\n\t", "relations": [["arguments", []]], "representation": "<span class='name'>relayout</span><span class='arguments'></span>", "type": "function", "id": "widgets.Element.relayout"}], ["bindUI", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='89'><p class='TEXTO N2' ostart='0' oend='89'>A generic method that invokes all the events/ui bindings necessary to operate the widget.</p></div>\n\t\n\t", "relations": [["arguments", []]], "representation": "<span class='name'>bindUI</span><span class='arguments'></span>", "type": "function", "id": "widgets.Element.bindUI"}], ["_bindField", {"representation": "<span class='name'>_bindField</span><span class='arguments'><span class='argument'>fui</span><span class='argument'>collection</span></span>", "type": "function", "id": "widgets.Element._bindField", "relations": [["arguments", ["fui", "collection"]]], "tags": ["method"]}], ["bindFields", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='64'><p class='TEXTO N2' ostart='0' oend='64'>Binds the given fields to the <code>inputs</code> and <code>outputs</code> properties.</p></div>\n\t\n\t", "relations": [["arguments", ["ui", "inputs", "outputs"]]], "representation": "<span class='name'>bindFields</span><span class='arguments'><span class='argument'>ui</span><span class='argument'>inputs</span><span class='argument'>outputs</span></span>", "type": "function", "id": "widgets.Element.bindFields"}], ["rebindStates", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='157'><p class='TEXTO N2' ostart='0' oend='157'>Clears the UIs already bound to the states, keeping the current state and rebinding all the <code>.when</code> uis. This will trigger the <code>setState</code> for all the values.</p></div>\n\t\n\t", "relations": [["arguments", ["states", "ui"]]], "representation": "<span class='name'>rebindStates</span><span class='arguments'><span class='argument'>states</span><span class='argument'>ui</span></span>", "type": "function", "id": "widgets.Element.rebindStates"}], ["bindStates", {"representation": "<span class='name'>bindStates</span><span class='arguments'><span class='argument'>states</span><span class='argument'>ui</span><span class='argument'>defaults</span></span>", "type": "function", "id": "widgets.Element.bindStates", "relations": [["arguments", ["states", "ui", "defaults"]]], "tags": ["method"]}], ["bindInlineUIS", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='74'><p class='TEXTO N2' ostart='0' oend='74'>Binds the inline uis, ie. nodes matching <code>.ui[data-ui]</code> and registers them</p></div>\n\t\n\t", "relations": [["arguments", []]], "representation": "<span class='name'>bindInlineUIS</span><span class='arguments'></span>", "type": "function", "id": "widgets.Element.bindInlineUIS"}], ["_getSingleField", {"representation": "<span class='name'>_getSingleField</span><span class='arguments'><span class='argument'>fieldName</span><span class='argument'>collections</span></span>", "type": "function", "id": "widgets.Element._getSingleField", "relations": [["arguments", ["fieldName", "collections"]]], "tags": ["method"]}], ["_getMultipleFieldValues", {"representation": "<span class='name'>_getMultipleFieldValues</span><span class='arguments'><span class='argument'>fieldNames</span><span class='argument'>collections</span></span>", "type": "function", "id": "widgets.Element._getMultipleFieldValues", "relations": [["arguments", ["fieldNames", "collections"]]], "tags": ["method"]}], ["get", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='115'><p class='TEXTO N2' ostart='0' oend='115'>Returns the value for the field with the given name in the given collection of fields, by default <code>[input, output]</code></p></div>\n\t\n\t", "relations": [["arguments", ["fieldName", "collections"]]], "representation": "<span class='name'>get</span><span class='arguments'><span class='argument'>fieldName</span><span class='argument'>collections</span></span>", "type": "function", "id": "widgets.Element.get"}], ["set", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='48'><p class='TEXTO N2' ostart='0' oend='48'>Sets the value for the field with the given name</p></div>\n\t\n\t", "relations": [["arguments", ["fieldName", "value", "eventSource"]]], "representation": "<span class='name'>set</span><span class='arguments'><span class='argument'>fieldName</span><span class='argument'>value</span><span class='argument'>eventSource</span></span>", "type": "function", "id": "widgets.Element.set"}], ["getFieldValue", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='93'><p class='TEXTO N2' ostart='0' oend='93'>Returns the value bound to the given <code>field</code>, coming from the 'inputs' or 'outputs' property.</p></div>\n\t\n\t", "relations": [["arguments", ["field"]]], "representation": "<span class='name'>getFieldValue</span><span class='arguments'><span class='argument'>field</span></span>", "type": "function", "id": "widgets.Element.getFieldValue"}], ["setFieldValue", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='92'><p class='TEXTO N2' ostart='0' oend='92'>Sets the <code>value</code> bound to the given <code>field</code>, coming from the 'inputs' or 'outputs' property.</p></div>\n\t\n\t", "relations": [["arguments", ["field", "value"]]], "representation": "<span class='name'>setFieldValue</span><span class='arguments'><span class='argument'>field</span><span class='argument'>value</span></span>", "type": "function", "id": "widgets.Element.setFieldValue"}], ["fill", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='43'><p class='TEXTO N2' ostart='0' oend='43'>Fill the given fields with the given values</p></div>\n\t\n\t", "relations": [["arguments", ["values"]]], "representation": "<span class='name'>fill</span><span class='arguments'><span class='argument'>values</span></span>", "type": "function", "id": "widgets.Element.fill"}], ["getDefaults", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='153'><p class='TEXTO N2' ostart='0' oend='153'>Returns the default values for all the fields that have one. This queries the <code>outputs</code> first, and then the <code>inputs</code> for their <code>data-default</code> attributes.</p></div>\n\t\n\t", "relations": [["arguments", []]], "representation": "<span class='name'>getDefaults</span><span class='arguments'></span>", "type": "function", "id": "widgets.Element.getDefaults"}], ["exportData", {"representation": "<span class='name'>exportData</span><span class='arguments'><span class='argument'>fields</span><span class='argument'>ignoreDefault</span></span>", "type": "function", "id": "widgets.Element.exportData", "relations": [["arguments", ["fields", "ignoreDefault"]]], "tags": ["method"]}], ["importData", {"representation": "<span class='name'>importData</span><span class='arguments'><span class='argument'>data</span><span class='argument'>fields</span></span>", "type": "function", "id": "widgets.Element.importData", "relations": [["arguments", ["data", "fields"]]], "tags": ["method"]}], ["syncInputsWithOutputs", {"representation": "<span class='name'>syncInputsWithOutputs</span><span class='arguments'></span>", "type": "function", "id": "widgets.Element.syncInputsWithOutputs", "relations": [["arguments", []]], "tags": ["method"]}], ["syncOutputsWithInputs", {"representation": "<span class='name'>syncOutputsWithInputs</span><span class='arguments'></span>", "type": "function", "id": "widgets.Element.syncOutputsWithInputs", "relations": [["arguments", []]], "tags": ["method"]}], ["getView", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='67'><p class='TEXTO N2' ostart='0' oend='67'>An alias that prevents forgetting the scope=ui when calling jQuery.</p></div>\n\t\n\t", "relations": [["arguments", ["selector", "scope"]]], "representation": "<span class='name'>getView</span><span class='arguments'><span class='argument'>selector</span><span class='argument'>scope</span></span>", "type": "function", "id": "widgets.Element.getView"}], ["setState", {"representation": "<span class='name'>setState</span><span class='arguments'><span class='argument'>state</span><span class='argument'>value</span><span class='argument'>depth</span></span>", "type": "function", "id": "widgets.Element.setState", "relations": [["arguments", ["state", "value", "depth"]]], "tags": ["method"]}], ["toggleState", {"representation": "<span class='name'>toggleState</span><span class='arguments'><span class='argument'>state</span></span>", "type": "function", "id": "widgets.Element.toggleState", "relations": [["arguments", ["state"]]], "tags": ["method"]}], ["hasState", {"representation": "<span class='name'>hasState</span><span class='arguments'><span class='argument'>state</span><span class='argument'>value</span></span>", "type": "function", "id": "widgets.Element.hasState", "relations": [["arguments", ["state", "value"]]], "tags": ["method"]}], ["getState", {"representation": "<span class='name'>getState</span><span class='arguments'><span class='argument'>state</span></span>", "type": "function", "id": "widgets.Element.getState", "relations": [["arguments", ["state"]]], "tags": ["method"]}], ["query", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='105'><p class='TEXTO N2' ostart='0' oend='105'>An alias to jQuery, which scopes by default to this widget UI. You should use this one instead of jQuery.</p></div>\n\t\n\t", "relations": [["arguments", ["selector", "scope"]]], "representation": "<span class='name'>query</span><span class='arguments'><span class='argument'>selector</span><span class='argument'>scope</span></span>", "type": "function", "id": "widgets.Element.query"}], ["cloneTemplate", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='112'><p class='TEXTO N2' ostart='0' oend='112'>Creates a new node from the given template, removing 'template' and 'hidden' classes, adding the 'actual' class.</p></div>\n\t\n\t", "relations": [["arguments", ["selector", "parent"]]], "representation": "<span class='name'>cloneTemplate</span><span class='arguments'><span class='argument'>selector</span><span class='argument'>parent</span></span>", "type": "function", "id": "widgets.Element.cloneTemplate"}], ["isVisible", {"representation": "<span class='name'>isVisible</span><span class='arguments'></span>", "type": "function", "id": "widgets.Element.isVisible", "relations": [["arguments", []]], "tags": ["method"]}], ["show", {"representation": "<span class='name'>show</span><span class='arguments'></span>", "type": "function", "id": "widgets.Element.show", "relations": [["arguments", []]], "tags": ["method"]}], ["hide", {"representation": "<span class='name'>hide</span><span class='arguments'></span>", "type": "function", "id": "widgets.Element.hide", "relations": [["arguments", []]], "tags": ["method"]}]], "id": "widgets.Element"}], ["Widget", {"type": "class", "children": [["UIS", {"id": "widgets.Widget.UIS", "type": "value", "name": "UIS", "tags": ["class attribute"]}], ["OPTIONS", {"id": "widgets.Widget.OPTIONS", "type": "value", "name": "OPTIONS", "tags": ["class attribute"]}], ["Instance", {"id": "widgets.Widget.Instance", "type": "value", "name": "Instance", "tags": ["class attribute"]}], ["layouts", {"type": "value", "name": "layouts", "id": "widgets.Widget.layouts"}], ["uis", {"type": "value", "name": "uis", "id": "widgets.Widget.uis"}], ["options", {"type": "value", "name": "options", "id": "widgets.Widget.options"}], ["actions", {"type": "value", "name": "actions", "id": "widgets.Widget.actions"}], ["behaviors", {"type": "value", "name": "behaviors", "id": "widgets.Widget.behaviors"}], ["handlers", {"type": "value", "name": "handlers", "id": "widgets.Widget.handlers"}], ["children", {"type": "value", "name": "children", "id": "widgets.Widget.children"}], ["cursors", {"type": "value", "name": "cursors", "id": "widgets.Widget.cursors"}], ["cache", {"type": "value", "name": "cache", "id": "widgets.Widget.cache"}], ["isEnabled", {"type": "value", "name": "isEnabled", "id": "widgets.Widget.isEnabled"}], ["isActive", {"type": "value", "name": "isActive", "id": "widgets.Widget.isActive"}], ["SelectorName", {"representation": "<span class='name'>SelectorName</span><span class='arguments'></span>", "type": "function", "id": "widgets.Widget.SelectorName", "relations": [["arguments", []]], "tags": ["class method"]}], ["Ensure", {"representation": "<span class='name'>Ensure</span><span class='arguments'><span class='argument'>selector</span><span class='argument'>widgetClass</span><span class='argument'>strict</span></span>", "type": "function", "id": "widgets.Widget.Ensure", "relations": [["arguments", ["selector", "widgetClass", "strict"]]], "tags": ["class method"]}], ["HasEvent", {"representation": "<span class='name'>HasEvent</span><span class='arguments'><span class='argument'>element</span><span class='argument'>name</span></span>", "type": "function", "id": "widgets.Widget.HasEvent", "relations": [["arguments", ["element", "name"]]], "tags": ["class method"]}], ["BindEvent", {"representation": "<span class='name'>BindEvent</span><span class='arguments'><span class='argument'>element</span><span class='argument'>name</span><span class='argument'>callback</span></span>", "type": "function", "id": "widgets.Widget.BindEvent", "relations": [["arguments", ["element", "name", "callback"]]], "tags": ["class method"]}], ["TriggerEvent", {"representation": "<span class='name'>TriggerEvent</span><span class='arguments'><span class='argument'>element</span><span class='argument'>name</span><span class='argument'>value</span><span class='argument'>source</span></span>", "type": "function", "id": "widgets.Widget.TriggerEvent", "relations": [["arguments", ["element", "name", "value", "source"]]], "tags": ["class method"]}], ["UnbindEvent", {"representation": "<span class='name'>UnbindEvent</span><span class='arguments'><span class='argument'>element</span><span class='argument'>name</span><span class='argument'>callback</span></span>", "type": "function", "id": "widgets.Widget.UnbindEvent", "relations": [["arguments", ["element", "name", "callback"]]], "tags": ["class method"]}], ["__init__", {"representation": "<span class='name'>__init__</span><span class='arguments'><span class='argument'>selector</span><span class='argument'>options</span></span>", "type": "function", "id": "widgets.Widget.__init__", "relations": [["arguments", ["selector", "options"]]], "tags": ["class constructor"]}], ["relayout", {"representation": "<span class='name'>relayout</span><span class='arguments'></span>", "type": "function", "id": "widgets.Widget.relayout", "relations": [["arguments", []]], "tags": ["method"]}], ["setOptions", {"representation": "<span class='name'>setOptions</span><span class='arguments'><span class='argument'>options</span></span>", "type": "function", "id": "widgets.Widget.setOptions", "relations": [["arguments", ["options"]]], "tags": ["method"]}], ["sync", {"representation": "<span class='name'>sync</span><span class='arguments'></span>", "type": "function", "id": "widgets.Widget.sync", "relations": [["arguments", []]], "tags": ["method"]}], ["enable", {"representation": "<span class='name'>enable</span><span class='arguments'></span>", "type": "function", "id": "widgets.Widget.enable", "relations": [["arguments", []]], "tags": ["method"]}], ["disable", {"representation": "<span class='name'>disable</span><span class='arguments'></span>", "type": "function", "id": "widgets.Widget.disable", "relations": [["arguments", []]], "tags": ["method"]}], ["activate", {"representation": "<span class='name'>activate</span><span class='arguments'></span>", "type": "function", "id": "widgets.Widget.activate", "relations": [["arguments", []]], "tags": ["method"]}], ["deactivate", {"representation": "<span class='name'>deactivate</span><span class='arguments'></span>", "type": "function", "id": "widgets.Widget.deactivate", "relations": [["arguments", []]], "tags": ["method"]}], ["setActive", {"representation": "<span class='name'>setActive</span><span class='arguments'></span>", "type": "function", "id": "widgets.Widget.setActive", "relations": [["arguments", []]], "tags": ["method"]}], ["setInactive", {"representation": "<span class='name'>setInactive</span><span class='arguments'></span>", "type": "function", "id": "widgets.Widget.setInactive", "relations": [["arguments", []]], "tags": ["method"]}], ["onActivate", {"representation": "<span class='name'>onActivate</span><span class='arguments'></span>", "type": "function", "id": "widgets.Widget.onActivate", "relations": [["arguments", []]], "tags": ["method"]}], ["onDeactivate", {"representation": "<span class='name'>onDeactivate</span><span class='arguments'></span>", "type": "function", "id": "widgets.Widget.onDeactivate", "relations": [["arguments", []]], "tags": ["method"]}], ["previsualize", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='127'><p class='TEXTO N2' ostart='0' oend='127'>Binds pre-visualized elements (usually rendered on the server) so that they're ready for update with the next <code>visualize</code> call.</p></div>\n\t\n\t", "relations": [["arguments", ["context", "elements", "extractor"]]], "representation": "<span class='name'>previsualize</span><span class='arguments'><span class='argument'>context</span><span class='argument'>elements</span><span class='argument'>extractor</span></span>", "type": "function", "id": "widgets.Widget.previsualize"}], ["visualize", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='454'><p class='TEXTO N2' ostart='0' oend='387'>Iterates on the given data, calling onCreate if the data was not there before, onUpdate if the data was already there or onRemove if the data was removed. <code>onCreate</code> takes (<code>context</code>, <code>data element</code>, <code>key</code>), <code>onUpdate</code> takes (<code>context</code>, <code>data element</code>, <code>key</code>, <code>interface element</code>) <code>onRemove</code> takes (<code>context</code>, <code>key</code>, <code>interface element</code>) where <code>onCreate</code> returns the <code>interface element</code>.</p><p class='TEXTO N18' ostart='389' oend='454'>This process is similar to D3's select/enter/update/exit process.</p></div>\n\t\n\t", "relations": [["arguments", ["context", "data", "onCreate", "onUpdate", "onRemove"]]], "representation": "<span class='name'>visualize</span><span class='arguments'><span class='argument'>context</span><span class='argument'>data</span><span class='argument'>onCreate</span><span class='argument'>onUpdate</span><span class='argument'>onRemove</span></span>", "type": "function", "id": "widgets.Widget.visualize"}], ["ensureCache", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='95'><p class='TEXTO N2' ostart='0' oend='95'>Ensures that there is a cache entry for the given key, filling it with the given default value.</p></div>\n\t\n\t", "relations": [["arguments", ["key", "defaultValue"]]], "representation": "<span class='name'>ensureCache</span><span class='arguments'><span class='argument'>key</span><span class='argument'>defaultValue</span></span>", "type": "function", "id": "widgets.Widget.ensureCache"}], ["bindUI", {"representation": "<span class='name'>bindUI</span><span class='arguments'></span>", "type": "function", "id": "widgets.Widget.bindUI", "relations": [["arguments", []]], "tags": ["method"]}], ["addChild", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='121'><p class='TEXTO N2' ostart='0' oend='121'>Adds the given ui/widget as a child to this widget. This returns the widget instance, or <code>None</code> if it is does not exists.</p></div>\n\t\n\t", "relations": [["arguments", ["cui"]]], "representation": "<span class='name'>addChild</span><span class='arguments'><span class='argument'>cui</span></span>", "type": "function", "id": "widgets.Widget.addChild"}], ["bindHandlers", {"representation": "<span class='name'>bindHandlers</span><span class='arguments'><span class='argument'>handlers</span></span>", "type": "function", "id": "widgets.Widget.bindHandlers", "relations": [["arguments", ["handlers"]]], "tags": ["method"]}], ["bindChildren", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='35'><p class='TEXTO N2' ostart='0' oend='35'>Binds the given widgets as children</p></div>\n\t\n\t", "relations": [["arguments", ["childrenUIS"]]], "representation": "<span class='name'>bindChildren</span><span class='arguments'><span class='argument'>childrenUIS</span></span>", "type": "function", "id": "widgets.Widget.bindChildren"}], ["updateUI", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='126'><p class='TEXTO N2' ostart='0' oend='126'>A placeholder method that can be implemented to update the ui elements once a change has been made (for instance, to the data)</p></div>\n\t\n\t", "relations": [["arguments", []]], "representation": "<span class='name'>updateUI</span><span class='arguments'></span>", "type": "function", "id": "widgets.Widget.updateUI"}], ["bindLayouts", {"representation": "<span class='name'>bindLayouts</span><span class='arguments'></span>", "type": "function", "id": "widgets.Widget.bindLayouts", "relations": [["arguments", []]], "tags": ["method"]}], ["bindActions", {"representation": "<span class='name'>bindActions</span><span class='arguments'><span class='argument'>cui</span><span class='argument'>selector</span></span>", "type": "function", "id": "widgets.Widget.bindActions", "relations": [["arguments", ["cui", "selector"]]], "tags": ["method"]}], ["bindAction", {"representation": "<span class='name'>bindAction</span><span class='arguments'><span class='argument'>name</span><span class='argument'>cui</span></span>", "type": "function", "id": "widgets.Widget.bindAction", "relations": [["arguments", ["name", "cui"]]], "tags": ["method"]}], ["bindUIS", {"representation": "<span class='name'>bindUIS</span><span class='arguments'><span class='argument'>uis</span></span>", "type": "function", "id": "widgets.Widget.bindUIS", "relations": [["arguments", ["uis"]]], "tags": ["method"]}], ["_bindUIPrefixes", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='115'><p class='TEXTO N2' ostart='0' oend='115'>Helper function used by bindUIS to allow to prevent doing multiple queries For elements that share the same prefix.</p></div>\n\t\n\t", "relations": [["arguments", ["prefixes", "scope", "prefix"]]], "representation": "<span class='name'>_bindUIPrefixes</span><span class='arguments'><span class='argument'>prefixes</span><span class='argument'>scope</span><span class='argument'>prefix</span></span>", "type": "function", "id": "widgets.Widget._bindUIPrefixes"}], ["findWidget", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='115'><p class='TEXTO N2' ostart='0' oend='115'>Returns the first widget instance that is part of this widget UI, having the given Widget class or jQuery selector.</p></div>\n\t\n\t", "relations": [["arguments", ["classOrSelector"]]], "representation": "<span class='name'>findWidget</span><span class='arguments'><span class='argument'>classOrSelector</span></span>", "type": "function", "id": "widgets.Widget.findWidget"}], ["findWidgets", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='119'><p class='TEXTO N2' ostart='0' oend='119'>Returns the list of widget instances that are part of this widget UI, having the given Widget class or jQuery selector.</p></div>\n\t\n\t", "relations": [["arguments", ["classOrSelector"]]], "representation": "<span class='name'>findWidgets</span><span class='arguments'><span class='argument'>classOrSelector</span></span>", "type": "function", "id": "widgets.Widget.findWidgets"}]], "id": "widgets.Widget"}], ["Control", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='110'><p class='TEXTO N2' ostart='0' oend='110'>A lightweight version of widget that is used for simple UI elements such a text fields, option selectors, etc.</p></div>\n\t\n\t", "type": "class", "children": [["CSS_CLASS", {"id": "widgets.Control.CSS_CLASS", "type": "value", "name": "CSS_CLASS", "tags": ["class attribute"]}], ["EVENTS", {"id": "widgets.Control.EVENTS", "type": "value", "name": "EVENTS", "tags": ["class attribute"]}], ["UIS", {"id": "widgets.Control.UIS", "type": "value", "name": "UIS", "tags": ["class attribute"]}], ["OPTIONS", {"id": "widgets.Control.OPTIONS", "type": "value", "name": "OPTIONS", "tags": ["class attribute"]}], ["ui", {"type": "value", "name": "ui", "id": "widgets.Control.ui"}], ["uis", {"type": "value", "name": "uis", "id": "widgets.Control.uis"}], ["options", {"type": "value", "name": "options", "id": "widgets.Control.options"}], ["isEnabled", {"type": "value", "name": "isEnabled", "id": "widgets.Control.isEnabled"}], ["Has", {"representation": "<span class='name'>Has</span><span class='arguments'><span class='argument'>ui</span></span>", "type": "function", "id": "widgets.Control.Has", "relations": [["arguments", ["ui"]]], "tags": ["class method"]}], ["HasEvent", {"representation": "<span class='name'>HasEvent</span><span class='arguments'><span class='argument'>ui</span><span class='argument'>event</span></span>", "type": "function", "id": "widgets.Control.HasEvent", "relations": [["arguments", ["ui", "event"]]], "tags": ["class method"]}], ["BindEvent", {"representation": "<span class='name'>BindEvent</span><span class='arguments'><span class='argument'>ui</span><span class='argument'>event</span><span class='argument'>callback</span></span>", "type": "function", "id": "widgets.Control.BindEvent", "relations": [["arguments", ["ui", "event", "callback"]]], "tags": ["class method"]}], ["TriggerEvent", {"representation": "<span class='name'>TriggerEvent</span><span class='arguments'><span class='argument'>ui</span><span class='argument'>event</span><span class='argument'>value</span><span class='argument'>source</span></span>", "type": "function", "id": "widgets.Control.TriggerEvent", "relations": [["arguments", ["ui", "event", "value", "source"]]], "tags": ["class method"]}], ["Bind", {"representation": "<span class='name'>Bind</span><span class='arguments'><span class='argument'>ui</span></span>", "type": "function", "id": "widgets.Control.Bind", "relations": [["arguments", ["ui"]]], "tags": ["class method"]}], ["Ensure", {"representation": "<span class='name'>Ensure</span><span class='arguments'><span class='argument'>ui</span></span>", "type": "function", "id": "widgets.Control.Ensure", "relations": [["arguments", ["ui"]]], "tags": ["class method"]}], ["Get", {"representation": "<span class='name'>Get</span><span class='arguments'><span class='argument'>ui</span></span>", "type": "function", "id": "widgets.Control.Get", "relations": [["arguments", ["ui"]]], "tags": ["class method"]}], ["__init__", {"representation": "<span class='name'>__init__</span><span class='arguments'><span class='argument'>ui</span></span>", "type": "function", "id": "widgets.Control.__init__", "relations": [["arguments", ["ui"]]], "tags": ["class constructor"]}], ["bindUI", {"representation": "<span class='name'>bindUI</span><span class='arguments'></span>", "type": "function", "id": "widgets.Control.bindUI", "relations": [["arguments", []]], "tags": ["method"]}], ["enable", {"representation": "<span class='name'>enable</span><span class='arguments'></span>", "type": "function", "id": "widgets.Control.enable", "relations": [["arguments", []]], "tags": ["method"]}], ["disable", {"representation": "<span class='name'>disable</span><span class='arguments'></span>", "type": "function", "id": "widgets.Control.disable", "relations": [["arguments", []]], "tags": ["method"]}], ["updateUI", {"representation": "<span class='name'>updateUI</span><span class='arguments'><span class='argument'>value</span></span>", "type": "function", "id": "widgets.Control.updateUI", "relations": [["arguments", ["value"]]], "tags": ["method"]}], ["getName", {"representation": "<span class='name'>getName</span><span class='arguments'></span>", "type": "function", "id": "widgets.Control.getName", "relations": [["arguments", []]], "tags": ["method"]}], ["getValue", {"representation": "<span class='name'>getValue</span><span class='arguments'></span>", "type": "function", "id": "widgets.Control.getValue", "relations": [["arguments", []]], "tags": ["method"]}], ["setValue", {"representation": "<span class='name'>setValue</span><span class='arguments'><span class='argument'>value</span></span>", "type": "function", "id": "widgets.Control.setValue", "relations": [["arguments", ["value"]]], "tags": ["method"]}], ["trigger", {"representation": "<span class='name'>trigger</span><span class='arguments'><span class='argument'>event</span><span class='argument'>value</span></span>", "type": "function", "id": "widgets.Control.trigger", "relations": [["arguments", ["event", "value"]]], "tags": ["method"]}], ["bind", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='16'><p class='TEXTO N2' ostart='0' oend='16'>An alias to <code>on</code></p></div>\n\t\n\t", "relations": [["arguments", ["event", "callback"]]], "representation": "<span class='name'>bind</span><span class='arguments'><span class='argument'>event</span><span class='argument'>callback</span></span>", "type": "function", "id": "widgets.Control.bind"}], ["on", {"representation": "<span class='name'>on</span><span class='arguments'><span class='argument'>event</span><span class='argument'>callback</span></span>", "type": "function", "id": "widgets.Control.on", "relations": [["arguments", ["event", "callback"]]], "tags": ["method"]}]], "id": "widgets.Control"}], ["Field", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='333'><p class='TEXTO N2' ostart='0' oend='124'>A simple wrapper around <code>input</code> and <code>textarea</code> fields that supports placeholders, detects <code>autocomplete</code> and <code>i18n</code> wrapper.</p><p class='TEXTO N7' ostart='126' oend='333'>Each field can defined a <code>data-placeholder</code> as a placeholder value. When the field's value is the placeholder, the <code>placeholder</code> class will be set. When the field has no value, the <code>empty</code> class will be set.</p></div>\n\t\n\t", "type": "class", "children": [["OPTIONS", {"id": "widgets.Field.OPTIONS", "type": "value", "name": "OPTIONS", "tags": ["class attribute"]}], ["bindUI", {"representation": "<span class='name'>bindUI</span><span class='arguments'></span>", "type": "function", "id": "widgets.Field.bindUI", "relations": [["arguments", []]], "tags": ["method"]}], ["cancelEvent", {"representation": "<span class='name'>cancelEvent</span><span class='arguments'><span class='argument'>e</span></span>", "type": "function", "id": "widgets.Field.cancelEvent", "relations": [["arguments", ["e"]]], "tags": ["method"]}], ["onChange", {"representation": "<span class='name'>onChange</span><span class='arguments'><span class='argument'>event</span></span>", "type": "function", "id": "widgets.Field.onChange", "relations": [["arguments", ["event"]]], "tags": ["method"]}], ["onFocusOrClick", {"representation": "<span class='name'>onFocusOrClick</span><span class='arguments'><span class='argument'>event</span></span>", "type": "function", "id": "widgets.Field.onFocusOrClick", "relations": [["arguments", ["event"]]], "tags": ["method"]}], ["onKeyUp", {"representation": "<span class='name'>onKeyUp</span><span class='arguments'></span>", "type": "function", "id": "widgets.Field.onKeyUp", "relations": [["arguments", []]], "tags": ["method"]}]], "id": "widgets.Field"}], ["I18NField", {"type": "class", "children": [["CSS_CLASS", {"id": "widgets.I18NField.CSS_CLASS", "type": "value", "name": "CSS_CLASS", "tags": ["class attribute"]}], ["EVENTS", {"id": "widgets.I18NField.EVENTS", "type": "value", "name": "EVENTS", "tags": ["class attribute"]}], ["OPTIONS", {"id": "widgets.I18NField.OPTIONS", "type": "value", "name": "OPTIONS", "tags": ["class attribute"]}], ["UIS", {"id": "widgets.I18NField.UIS", "type": "value", "name": "UIS", "tags": ["class attribute"]}], ["selector", {"type": "value", "name": "selector", "id": "widgets.I18NField.selector"}], ["bindUI", {"representation": "<span class='name'>bindUI</span><span class='arguments'></span>", "type": "function", "id": "widgets.I18NField.bindUI", "relations": [["arguments", []]], "tags": ["method"]}], ["setValue", {"representation": "<span class='name'>setValue</span><span class='arguments'><span class='argument'>value</span></span>", "type": "function", "id": "widgets.I18NField.setValue", "relations": [["arguments", ["value"]]], "tags": ["method"]}], ["getValue", {"representation": "<span class='name'>getValue</span><span class='arguments'></span>", "type": "function", "id": "widgets.I18NField.getValue", "relations": [["arguments", []]], "tags": ["method"]}], ["updateUI", {"representation": "<span class='name'>updateUI</span><span class='arguments'><span class='argument'>value</span></span>", "type": "function", "id": "widgets.I18NField.updateUI", "relations": [["arguments", ["value"]]], "tags": ["method"]}], ["getDisplayedLanguage", {"representation": "<span class='name'>getDisplayedLanguage</span><span class='arguments'></span>", "type": "function", "id": "widgets.I18NField.getDisplayedLanguage", "relations": [["arguments", []]], "tags": ["method"]}], ["onFieldChange", {"representation": "<span class='name'>onFieldChange</span><span class='arguments'></span>", "type": "function", "id": "widgets.I18NField.onFieldChange", "relations": [["arguments", []]], "tags": ["method"]}], ["onSelectorChange", {"representation": "<span class='name'>onSelectorChange</span><span class='arguments'><span class='argument'>event</span></span>", "type": "function", "id": "widgets.I18NField.onSelectorChange", "relations": [["arguments", ["event"]]], "tags": ["method"]}]], "id": "widgets.I18NField"}], ["Selector", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='48'><p class='TEXTO N2' ostart='0' oend='48'>A control that implements SELECT/OPTION behavior</p></div>\n\t\n\t", "type": "class", "children": [["CSS_CLASS", {"id": "widgets.Selector.CSS_CLASS", "type": "value", "name": "CSS_CLASS", "tags": ["class attribute"]}], ["EVENTS", {"id": "widgets.Selector.EVENTS", "type": "value", "name": "EVENTS", "tags": ["class attribute"]}], ["OPTIONS", {"id": "widgets.Selector.OPTIONS", "type": "value", "name": "OPTIONS", "tags": ["class attribute"]}], ["UIS", {"id": "widgets.Selector.UIS", "type": "value", "name": "UIS", "tags": ["class attribute"]}], ["clickDelayed", {"type": "value", "name": "clickDelayed", "id": "widgets.Selector.clickDelayed"}], ["bindUI", {"representation": "<span class='name'>bindUI</span><span class='arguments'></span>", "type": "function", "id": "widgets.Selector.bindUI", "relations": [["arguments", []]], "tags": ["method"]}], ["onClick", {"representation": "<span class='name'>onClick</span><span class='arguments'><span class='argument'>event</span></span>", "type": "function", "id": "widgets.Selector.onClick", "relations": [["arguments", ["event"]]], "tags": ["method"]}], ["selectDefault", {"representation": "<span class='name'>selectDefault</span><span class='arguments'></span>", "type": "function", "id": "widgets.Selector.selectDefault", "relations": [["arguments", []]], "tags": ["method"]}], ["selectNone", {"representation": "<span class='name'>selectNone</span><span class='arguments'></span>", "type": "function", "id": "widgets.Selector.selectNone", "relations": [["arguments", []]], "tags": ["method"]}], ["selectAll", {"representation": "<span class='name'>selectAll</span><span class='arguments'></span>", "type": "function", "id": "widgets.Selector.selectAll", "relations": [["arguments", []]], "tags": ["method"]}], ["getAllValues", {"representation": "<span class='name'>getAllValues</span><span class='arguments'></span>", "type": "function", "id": "widgets.Selector.getAllValues", "relations": [["arguments", []]], "tags": ["method"]}], ["getValue", {"representation": "<span class='name'>getValue</span><span class='arguments'></span>", "type": "function", "id": "widgets.Selector.getValue", "relations": [["arguments", []]], "tags": ["method"]}], ["getDefaultValue", {"representation": "<span class='name'>getDefaultValue</span><span class='arguments'><span class='argument'>option</span></span>", "type": "function", "id": "widgets.Selector.getDefaultValue", "relations": [["arguments", ["option"]]], "tags": ["method"]}], ["getOptions", {"representation": "<span class='name'>getOptions</span><span class='arguments'></span>", "type": "function", "id": "widgets.Selector.getOptions", "relations": [["arguments", []]], "tags": ["method"]}], ["getOptionsCount", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='53'><p class='TEXTO N2' ostart='0' oend='53'>Returns the count of options, exlcuding <code>options any</code></p></div>\n\t\n\t", "relations": [["arguments", []]], "representation": "<span class='name'>getOptionsCount</span><span class='arguments'></span>", "type": "function", "id": "widgets.Selector.getOptionsCount"}], ["isAllSelected", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='70'><p class='TEXTO N2' ostart='0' oend='70'>Tells wether all the options are selected, this supports <code>option any</code>.</p></div>\n\t\n\t", "relations": [["arguments", []]], "representation": "<span class='name'>isAllSelected</span><span class='arguments'></span>", "type": "function", "id": "widgets.Selector.isAllSelected"}], ["isOneSelected", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='41'><p class='TEXTO N2' ostart='0' oend='41'>Tells weather only one option is selected</p></div>\n\t\n\t", "relations": [["arguments", []]], "representation": "<span class='name'>isOneSelected</span><span class='arguments'></span>", "type": "function", "id": "widgets.Selector.isOneSelected"}], ["setValue", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='204'><p class='TEXTO N2' ostart='0' oend='204'>Sets the current value for the selector. This method is fairly complex as it has to manage all the difference cases, such as single/multiple selection, not allowing an empty selection, and the <code>any</code> case.</p></div>\n\t\n\t", "relations": [["arguments", ["value", "force"]]], "representation": "<span class='name'>setValue</span><span class='arguments'><span class='argument'>value</span><span class='argument'>force</span></span>", "type": "function", "id": "widgets.Selector.setValue"}], ["setOptions", {"representation": "<span class='name'>setOptions</span><span class='arguments'><span class='argument'>values</span><span class='argument'>currentValue</span><span class='argument'>callback</span></span>", "type": "function", "id": "widgets.Selector.setOptions", "relations": [["arguments", ["values", "currentValue", "callback"]]], "tags": ["method"]}], ["onOptionClick", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='107'><p class='TEXTO N2' ostart='0' oend='107'>Handles a click on an option. This method will handle the cases for <code>options multiple</code> and <code>options empty</code>.</p></div>\n\t\n\t", "relations": [["arguments", ["sui"]]], "representation": "<span class='name'>onOptionClick</span><span class='arguments'><span class='argument'>sui</span></span>", "type": "function", "id": "widgets.Selector.onOptionClick"}], ["updateOptions", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='54'><p class='TEXTO N2' ostart='0' oend='54'>Updates the <code>uis.options</code> by reading them from the DOM</p></div>\n\t\n\t", "relations": [["arguments", ["currentValue"]]], "representation": "<span class='name'>updateOptions</span><span class='arguments'><span class='argument'>currentValue</span></span>", "type": "function", "id": "widgets.Selector.updateOptions"}], ["getLabel", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='34'><p class='TEXTO N2' ostart='0' oend='34'>Gets the label for the given value</p></div>\n\t\n\t", "relations": [["arguments", ["value"]]], "representation": "<span class='name'>getLabel</span><span class='arguments'><span class='argument'>value</span></span>", "type": "function", "id": "widgets.Selector.getLabel"}], ["getIndex", {"representation": "<span class='name'>getIndex</span><span class='arguments'><span class='argument'>value</span></span>", "type": "function", "id": "widgets.Selector.getIndex", "relations": [["arguments", ["value"]]], "tags": ["method"]}]], "id": "widgets.Selector"}], ["Autocomplete", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='207'><p class='TEXTO N2' ostart='0' oend='99'>A control that allows to autocomplete a field, optionally showing a menu with the possible options.</p><p class='TEXTO N3' ostart='101' oend='207'>The <code>Autocomplete</code> should be bound to an element that contains the field <code>.in</code> and the autcomplete panels.</p></div>\n\t\n\t", "type": "class", "children": [["CSS_CLASS", {"id": "widgets.Autocomplete.CSS_CLASS", "type": "value", "name": "CSS_CLASS", "tags": ["class attribute"]}], ["SOUNDEX", {"id": "widgets.Autocomplete.SOUNDEX", "type": "value", "name": "SOUNDEX", "tags": ["class attribute"]}], ["OPTIONS", {"id": "widgets.Autocomplete.OPTIONS", "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='67'><p class='TEXTO N2' ostart='0' oend='67'>filter : Toggle if the completions will all show by default or not.</p></div>\n\t\n\t", "type": "value", "name": "OPTIONS", "tags": ["class attribute"]}], ["UIS", {"id": "widgets.Autocomplete.UIS", "type": "value", "name": "UIS", "tags": ["class attribute"]}], ["on", {"type": "value", "name": "on", "id": "widgets.Autocomplete.on"}], ["Soundex", {"representation": "<span class='name'>Soundex</span><span class='arguments'><span class='argument'>s</span><span class='argument'>lang</span></span>", "type": "function", "id": "widgets.Autocomplete.Soundex", "relations": [["arguments", ["s", "lang"]]], "tags": ["class method"]}], ["completions", {"type": "value", "name": "completions", "id": "widgets.Autocomplete.completions"}], ["selected", {"type": "value", "name": "selected", "id": "widgets.Autocomplete.selected"}], ["_options", {"type": "value", "name": "_options", "id": "widgets.Autocomplete._options"}], ["_value", {"type": "value", "name": "_value", "id": "widgets.Autocomplete._value"}], ["_completions", {"type": "value", "name": "_completions", "id": "widgets.Autocomplete._completions"}], ["bindUI", {"representation": "<span class='name'>bindUI</span><span class='arguments'></span>", "type": "function", "id": "widgets.Autocomplete.bindUI", "relations": [["arguments", []]], "tags": ["method"]}], ["onInputPress", {"representation": "<span class='name'>onInputPress</span><span class='arguments'><span class='argument'>event</span></span>", "type": "function", "id": "widgets.Autocomplete.onInputPress", "relations": [["arguments", ["event"]]], "tags": ["method"]}], ["onInputKeyDown", {"representation": "<span class='name'>onInputKeyDown</span><span class='arguments'><span class='argument'>event</span></span>", "type": "function", "id": "widgets.Autocomplete.onInputKeyDown", "relations": [["arguments", ["event"]]], "tags": ["method"]}], ["onInputKeyUp", {"representation": "<span class='name'>onInputKeyUp</span><span class='arguments'><span class='argument'>event</span></span>", "type": "function", "id": "widgets.Autocomplete.onInputKeyUp", "relations": [["arguments", ["event"]]], "tags": ["method"]}], ["_triggerUpdate", {"representation": "<span class='name'>_triggerUpdate</span><span class='arguments'></span>", "type": "function", "id": "widgets.Autocomplete._triggerUpdate", "relations": [["arguments", []]], "tags": ["method"]}], ["show", {"representation": "<span class='name'>show</span><span class='arguments'></span>", "type": "function", "id": "widgets.Autocomplete.show", "relations": [["arguments", []]], "tags": ["method"]}], ["hide", {"representation": "<span class='name'>hide</span><span class='arguments'></span>", "type": "function", "id": "widgets.Autocomplete.hide", "relations": [["arguments", []]], "tags": ["method"]}], ["update", {"representation": "<span class='name'>update</span><span class='arguments'><span class='argument'>value</span></span>", "type": "function", "id": "widgets.Autocomplete.update", "relations": [["arguments", ["value"]]], "tags": ["method"]}], ["selectNextCompletion", {"representation": "<span class='name'>selectNextCompletion</span><span class='arguments'></span>", "type": "function", "id": "widgets.Autocomplete.selectNextCompletion", "relations": [["arguments", []]], "tags": ["method"]}], ["selectPreviousCompletion", {"representation": "<span class='name'>selectPreviousCompletion</span><span class='arguments'></span>", "type": "function", "id": "widgets.Autocomplete.selectPreviousCompletion", "relations": [["arguments", []]], "tags": ["method"]}], ["selectCompletion", {"representation": "<span class='name'>selectCompletion</span><span class='arguments'><span class='argument'>i</span></span>", "type": "function", "id": "widgets.Autocomplete.selectCompletion", "relations": [["arguments", ["i"]]], "tags": ["method"]}], ["applyCompletion", {"representation": "<span class='name'>applyCompletion</span><span class='arguments'><span class='argument'>selected</span></span>", "type": "function", "id": "widgets.Autocomplete.applyCompletion", "relations": [["arguments", ["selected"]]], "tags": ["method"]}], ["clearInput", {"representation": "<span class='name'>clearInput</span><span class='arguments'></span>", "type": "function", "id": "widgets.Autocomplete.clearInput", "relations": [["arguments", []]], "tags": ["method"]}], ["getValue", {"representation": "<span class='name'>getValue</span><span class='arguments'></span>", "type": "function", "id": "widgets.Autocomplete.getValue", "relations": [["arguments", []]], "tags": ["method"]}], ["getCompletions", {"representation": "<span class='name'>getCompletions</span><span class='arguments'></span>", "type": "function", "id": "widgets.Autocomplete.getCompletions", "relations": [["arguments", []]], "tags": ["method"]}], ["hasCompletions", {"representation": "<span class='name'>hasCompletions</span><span class='arguments'></span>", "type": "function", "id": "widgets.Autocomplete.hasCompletions", "relations": [["arguments", []]], "tags": ["method"]}], ["setCompletions", {"representation": "<span class='name'>setCompletions</span><span class='arguments'><span class='argument'>completions</span></span>", "type": "function", "id": "widgets.Autocomplete.setCompletions", "relations": [["arguments", ["completions"]]], "tags": ["method"]}], ["complete", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='60'><p class='TEXTO N2' ostart='0' oend='60'>Returns the list of values that can complete the given value</p></div>\n\t\n\t", "relations": [["arguments", ["value"]]], "representation": "<span class='name'>complete</span><span class='arguments'><span class='argument'>value</span></span>", "type": "function", "id": "widgets.Autocomplete.complete"}], ["_renderOption", {"representation": "<span class='name'>_renderOption</span><span class='arguments'><span class='argument'>context</span><span class='argument'>datum</span><span class='argument'>index</span><span class='argument'>nui</span></span>", "type": "function", "id": "widgets.Autocomplete._renderOption", "relations": [["arguments", ["context", "datum", "index", "nui"]]], "tags": ["method"]}]], "id": "widgets.Autocomplete"}], ["List", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='342'><p class='TEXTO N2' ostart='0' oend='109'>A collection of functions to bind a composable editable list. The list control's UI looks like the following:</p><pre class='TEXTO N3' ostart='111' oend='341'><code>&lt;div.list\n&lt;ul.elements\n&lt;li.when-empty:Empty\n&lt;li.template\n&lt;span.value.out(data-field=value):&amp;mdash;\n&lt;button.do-remove:&amp;times;\n&lt;button.do-moveUp:&amp;uarr;\n&lt;button.do-moveDown:&amp;darr;\n&lt;input.in-value(type=text)\n&lt;button.do-add:Add</code></pre></div>\n\t\n\t", "type": "class", "children": [["CSS_CLASS", {"id": "widgets.List.CSS_CLASS", "type": "value", "name": "CSS_CLASS", "tags": ["class attribute"]}], ["EVENTS", {"id": "widgets.List.EVENTS", "type": "value", "name": "EVENTS", "tags": ["class attribute"]}], ["OPTIONS", {"id": "widgets.List.OPTIONS", "type": "value", "name": "OPTIONS", "tags": ["class attribute"]}], ["UIS", {"id": "widgets.List.UIS", "type": "value", "name": "UIS", "tags": ["class attribute"]}], ["on", {"type": "value", "name": "on", "id": "widgets.List.on"}], ["processor", {"type": "value", "name": "processor", "id": "widgets.List.processor"}], ["bindUI", {"representation": "<span class='name'>bindUI</span><span class='arguments'></span>", "type": "function", "id": "widgets.List.bindUI", "relations": [["arguments", []]], "tags": ["method"]}], ["getInputValue", {"representation": "<span class='name'>getInputValue</span><span class='arguments'></span>", "type": "function", "id": "widgets.List.getInputValue", "relations": [["arguments", []]], "tags": ["method"]}], ["setData", {"representation": "<span class='name'>setData</span><span class='arguments'><span class='argument'>data</span></span>", "type": "function", "id": "widgets.List.setData", "relations": [["arguments", ["data"]]], "tags": ["method"]}], ["getData", {"representation": "<span class='name'>getData</span><span class='arguments'></span>", "type": "function", "id": "widgets.List.getData", "relations": [["arguments", []]], "tags": ["method"]}], ["add", {"representation": "<span class='name'>add</span><span class='arguments'><span class='argument'>value</span></span>", "type": "function", "id": "widgets.List.add", "relations": [["arguments", ["value"]]], "tags": ["method"]}], ["_addElement", {"representation": "<span class='name'>_addElement</span><span class='arguments'><span class='argument'>value</span></span>", "type": "function", "id": "widgets.List._addElement", "relations": [["arguments", ["value"]]], "tags": ["method"]}], ["removeElement", {"representation": "<span class='name'>removeElement</span><span class='arguments'><span class='argument'>eui</span></span>", "type": "function", "id": "widgets.List.removeElement", "relations": [["arguments", ["eui"]]], "tags": ["method"]}], ["moveUp", {"representation": "<span class='name'>moveUp</span><span class='arguments'><span class='argument'>eui</span></span>", "type": "function", "id": "widgets.List.moveUp", "relations": [["arguments", ["eui"]]], "tags": ["method"]}], ["moveDown", {"representation": "<span class='name'>moveDown</span><span class='arguments'><span class='argument'>eui</span></span>", "type": "function", "id": "widgets.List.moveDown", "relations": [["arguments", ["eui"]]], "tags": ["method"]}], ["hasValue", {"representation": "<span class='name'>hasValue</span><span class='arguments'><span class='argument'>value</span></span>", "type": "function", "id": "widgets.List.hasValue", "relations": [["arguments", ["value"]]], "tags": ["method"]}], ["_updateValue", {"representation": "<span class='name'>_updateValue</span><span class='arguments'></span>", "type": "function", "id": "widgets.List._updateValue", "relations": [["arguments", []]], "tags": ["method"]}], ["getValue", {"representation": "<span class='name'>getValue</span><span class='arguments'></span>", "type": "function", "id": "widgets.List.getValue", "relations": [["arguments", []]], "tags": ["method"]}], ["findElement", {"representation": "<span class='name'>findElement</span><span class='arguments'><span class='argument'>value</span></span>", "type": "function", "id": "widgets.List.findElement", "relations": [["arguments", ["value"]]], "tags": ["method"]}], ["getElement", {"representation": "<span class='name'>getElement</span><span class='arguments'><span class='argument'>index</span></span>", "type": "function", "id": "widgets.List.getElement", "relations": [["arguments", ["index"]]], "tags": ["method"]}], ["setValue", {"representation": "<span class='name'>setValue</span><span class='arguments'><span class='argument'>value</span></span>", "type": "function", "id": "widgets.List.setValue", "relations": [["arguments", ["value"]]], "tags": ["method"]}]], "id": "widgets.List"}], ["Layout", {"type": "class", "children": [["ui", {"type": "value", "name": "ui", "id": "widgets.Layout.ui"}], ["items", {"type": "value", "name": "items", "id": "widgets.Layout.items"}], ["Ensure", {"representation": "<span class='name'>Ensure</span><span class='arguments'><span class='argument'>ui</span></span>", "type": "function", "id": "widgets.Layout.Ensure", "relations": [["arguments", ["ui"]]], "tags": ["class method"]}], ["__init__", {"representation": "<span class='name'>__init__</span><span class='arguments'><span class='argument'>ui</span></span>", "type": "function", "id": "widgets.Layout.__init__", "relations": [["arguments", ["ui"]]], "tags": ["class constructor"]}], ["relayout", {"representation": "<span class='name'>relayout</span><span class='arguments'></span>", "type": "function", "id": "widgets.Layout.relayout", "relations": [["arguments", []]], "tags": ["method"]}], ["center", {"representation": "<span class='name'>center</span><span class='arguments'><span class='argument'>tui</span><span class='argument'>width</span><span class='argument'>height</span></span>", "type": "function", "id": "widgets.Layout.center", "relations": [["arguments", ["tui", "width", "height"]]], "tags": ["method"]}], ["stick", {"representation": "<span class='name'>stick</span><span class='arguments'><span class='argument'>tui</span><span class='argument'>width</span><span class='argument'>height</span><span class='argument'>data</span></span>", "type": "function", "id": "widgets.Layout.stick", "relations": [["arguments", ["tui", "width", "height", "data"]]], "tags": ["method"]}]], "id": "widgets.Layout"}], ["clearSelection", {"representation": "<span class='name'>clearSelection</span><span class='arguments'></span>", "type": "function", "id": "widgets.clearSelection", "relations": [["arguments", []]], "tags": ["function"]}], ["show", {"representation": "<span class='name'>show</span><span class='arguments'><span class='argument'>selector</span></span>", "type": "function", "id": "widgets.show", "relations": [["arguments", ["selector"]]], "tags": ["function"]}], ["hide", {"representation": "<span class='name'>hide</span><span class='arguments'><span class='argument'>selector</span></span>", "type": "function", "id": "widgets.hide", "relations": [["arguments", ["selector"]]], "tags": ["function"]}], ["toggle", {"representation": "<span class='name'>toggle</span><span class='arguments'><span class='argument'>toShow</span><span class='argument'>toHide...=...</span></span>", "type": "function", "id": "widgets.toggle", "relations": [["arguments", ["toShow", "toHide...=..."]]], "tags": ["function"]}], ["getUIWidgetClass", {"representation": "<span class='name'>getUIWidgetClass</span><span class='arguments'><span class='argument'>selector</span></span>", "type": "function", "id": "widgets.getUIWidgetClass", "relations": [["arguments", ["selector"]]], "tags": ["function"]}], ["autobind", {"tags": ["function"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='72'><p class='TEXTO N2' ostart='0' oend='72'>Automatically binds the widges in the given selector the given selector:</p></div>\n\t\n\t", "relations": [["arguments", ["selector"]]], "representation": "<span class='name'>autobind</span><span class='arguments'><span class='argument'>selector</span></span>", "type": "function", "id": "widgets.autobind"}], ["bindSelector", {"representation": "<span class='name'>bindSelector</span><span class='arguments'><span class='argument'>selector</span></span>", "type": "function", "id": "widgets.bindSelector", "relations": [["arguments", ["selector"]]], "tags": ["function"]}], ["bindSelectors", {"tags": ["function"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='192'><p class='TEXTO N2' ostart='0' oend='27'>CSS classes for the option:</p><ul class='TEXTO N3' ostart='27' oend='192'><li class='TEXTO N4' ostart='27' oend='76'><code>is-multiple</code> to allow multiple selections </li><li class='TEXTO N6' ostart='76' oend='134'><code>no-0</code> prevents the selector from being empty </li><li class='TEXTO N8' ostart='134' oend='192'><code>no-N</code> blanks the selection when all selected</li></ul></div>\n\t\n\t", "relations": [["arguments", ["selector"]]], "representation": "<span class='name'>bindSelectors</span><span class='arguments'><span class='argument'>selector</span></span>", "type": "function", "id": "widgets.bindSelectors"}], ["bindList", {"representation": "<span class='name'>bindList</span><span class='arguments'><span class='argument'>selector</span></span>", "type": "function", "id": "widgets.bindList", "relations": [["arguments", ["selector"]]], "tags": ["function"]}], ["bindLists", {"representation": "<span class='name'>bindLists</span><span class='arguments'><span class='argument'>selector</span></span>", "type": "function", "id": "widgets.bindLists", "relations": [["arguments", ["selector"]]], "tags": ["function"]}], ["bindAutocomplete", {"representation": "<span class='name'>bindAutocomplete</span><span class='arguments'><span class='argument'>ui</span></span>", "type": "function", "id": "widgets.bindAutocomplete", "relations": [["arguments", ["ui"]]], "tags": ["function"]}], ["bindI18N", {"representation": "<span class='name'>bindI18N</span><span class='arguments'><span class='argument'>container</span><span class='argument'>field</span></span>", "type": "function", "id": "widgets.bindI18N", "relations": [["arguments", ["container", "field"]]], "tags": ["function"]}], ["bindField", {"tags": ["function"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='68'><p class='TEXTO N2' ostart='0' oend='68'>Calls <code>Field.Bind</code> on the given UI if it is an input or a text area.</p></div>\n\t\n\t", "relations": [["arguments", ["ui"]]], "representation": "<span class='name'>bindField</span><span class='arguments'><span class='argument'>ui</span></span>", "type": "function", "id": "widgets.bindField"}], ["bindFields", {"tags": ["function"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='79'><p class='TEXTO N2' ostart='0' oend='79'>Looks for all the <code>.in</code> declared in the document and calls <code>bindField</code> on them.</p></div>\n\t\n\t", "relations": [["arguments", ["selector"]]], "representation": "<span class='name'>bindFields</span><span class='arguments'><span class='argument'>selector</span></span>", "type": "function", "id": "widgets.bindFields"}], ["bindBehaviours", {"representation": "<span class='name'>bindBehaviours</span><span class='arguments'><span class='argument'>selector</span></span>", "type": "function", "id": "widgets.bindBehaviours", "relations": [["arguments", ["selector"]]], "tags": ["function"]}], ["bindLayouts", {"representation": "<span class='name'>bindLayouts</span><span class='arguments'><span class='argument'>selector</span></span>", "type": "function", "id": "widgets.bindLayouts", "relations": [["arguments", ["selector"]]], "tags": ["function"]}], ["initialize", {"tags": ["function"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='55'><p class='TEXTO N2' ostart='0' oend='55'>Ensures that the widgets module is properly initialized</p></div>\n\t\n\t", "relations": [["arguments", []]], "representation": "<span class='name'>initialize</span><span class='arguments'></span>", "type": "function", "id": "widgets.initialize"}], ["bind", {"tags": ["function"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='44'><p class='TEXTO N2' ostart='0' oend='44'>Binds widgets defined at the given selector.</p></div>\n\t\n\t", "relations": [["arguments", ["selector", "skipTemplates"]]], "representation": "<span class='name'>bind</span><span class='arguments'><span class='argument'>selector</span><span class='argument'>skipTemplates</span></span>", "type": "function", "id": "widgets.bind"}], ["__moduleinit__", {"representation": "<span class='name'>__moduleinit__</span><span class='arguments'></span>", "type": "function", "id": "widgets.__moduleinit__", "relations": [["arguments", []]], "tags": ["function"]}]], "id": "widgets"}]]}
