<!DOCTYPE html> 
<html>
  <head>
    <meta charset="utf8" />
    <link href="https://fonts.googleapis.com/css?family=Fira+Mono|Fira+Sans" rel="stylesheet" />
    <style>html,body{background:#FCFCF6;color:#000;font:8pt "Fira Sans","Lucida Grande","Lucida",Helvetica,sans-serif;line-height:14pt;padding:0;margin:0}a,a:active,a:link,a:visited,a:hover{color:#404040;text-decoration:none;outline:0 solid transparent;transition-property:color,background-color;-moz-transition-property:color,background-color;-webkit-transition-property:color,background-color;-o-transition-property:color,background-color;-ms-transition-property:color,background-color;transition-duration:.15s;-moz-transition-duration:.15s;-webkit-transition-duration:.15s;-o-transition-duration:.15s;-ms-transition-duration:.15s}code{color:#8FB216}code,pre{font-family:"Fira Mono",monospace}.name,.name a{color:#CDB425}.type{color:#CDB425}.undocumented{font-style:italic;opacity:.5}.slots{padding:0;margin:0}.slots .slot{list-style-type:none;padding:0}.slots .slot:hover{background-color:rgba(234,224,140,0.63);border-radius:2px;-moz-border-radius:2px;-webkit-border-radius:2px;-o-border-radius:2px;-ms-border-radius:2px}.slots .slot.active{font-weight:bold}.slots .slot>a{display:block}.slots .slot>a:before{display:inline-block;content:"•";color:#D0C0C0;font-style:italic;width:14px}.slots .slot[data-type="function"]>a:before{content:"λ"}.slots .slot[data-type="module"]>a:before{content:"M"}.slots .slot[data-type="class"]>a:before{content:"C"}.container{color:#404040;box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;-o-box-sizing:border-box;-ms-box-sizing:border-box;border-left:1px solid #F0F0F0;flex-grow:1;padding-left:10pt;overflow-y:auto}.container .title{padding-top:10pt;margin-bottom:5pt;font-weight:bold;border-bottom:1px solid #F0F0F0;color:#505050}.container .name{font-weight:bold;margin-top:1em}.container .name:before{content:"";text-align:center;display:none;opacity:.5;font-style:italic;padding-right:5px}.container[data-type="function"]>.name:before{content:"function";display:inline-block}.container[data-type="module"]>.name:before{content:"module";display:inline-block}.container[data-type="class"]>.name:before{content:"class";display:inline-block}#smalldoc{display:flex;align-items:stretch;width:100%;height:100vh}#containers{flex-grow:1;background:#FFF;border-right:1px solid #F0F0F0;display:flex}#description{flex-grow:2;padding:10pt}#description .overview{padding-left:10pt}#description .overview .type{padding-right:5px;opacity:.5}#description .overview .parents .parent{opacity:.5;display:none}#description .overview .parents .parent:after{content:"."}#description .overview .parents .parent:last-child{display:inline;opacity:1}#description .representation{border-top:1px solid rgba(234,224,140,0.63);border-bottom:1px solid rgba(234,224,140,0.63);margin-bottom:-1px;position:relative;margin-top:1.25em;padding:20pt;margin-left:-10pt;margin-right:-10pt;background:#FBF8E1;font-size:150%;line-height:1.25em}#description .representation .arguments:before{content:"(";opacity:.5}#description .representation .arguments:after{content:")";opacity:.5}#description .representation .arguments .argument:after{content:",";opacity:.5}#description .representation .arguments .argument:last-child:after{content:""}#description .documentation{font-size:13px;line-height:1.5em;border-top:1px solid #F0F0F0;border-bottom:1px solid #F0F0F0;background:#FFF;margin-left:-10pt;margin-right:-10pt;padding:20pt;color:#808080}#description .documentation p{max-width:45em}#description .documentation ul{margin-left:0;padding-left:10pt;list-style-type:circle}#description .documentation li{padding-left:5pt}#description .relations{padding:10pt}#description .relations h2{font-size:100%;margin-bottom:0}#description .relations ul{padding-left:0}#description .relations ul,#description .relations li{list-style-type:none}#hidden{display:none}#about{position:fixed;bottom:5pt;right:10pt;opacity:.5;text-align:right}REMOVED #descriptions{padding:0;margin:0;flex-grow:3}REMOVED #options{display:none;text-align:right}REMOVED #options label{font-weight:bold;padding-left:10px}REMOVED #containers{width:150px;padding:0;padding-left:5pt;padding-right:10pt;background:#FFF;border-right:1px solid #F0F0F0;overflow:auto;display:flex;flex-grow:0}REMOVED #modules ul{margin:0;padding:0}REMOVED #modules ul li{list-style-type:none;padding:0}REMOVED #hidden{padding:0;margin:0;display:none}REMOVED #containers{width:400px}REMOVED #smalldoc{display:flex;align-items:stretch;width:100%;height:100vh}REMOVED #smalldoc.description{display:none;padding:10pt}REMOVED #smalldoc.noattributes{color:#D0C0C0;font-style:italic}REMOVED #smalldoc.name.parent,REMOVED #smalldoc.name.parent a{font-weight:normal}REMOVED #smalldoc.term{font-weight:bold;color:#CDB425;background:#F9FFDE;padding-left:2px;padding-right:2px}REMOVED #smalldoc.special{font-weight:bold}REMOVED #smalldoc.special.__bases__{font-weight:normal;color:#CDB425}REMOVED #smalldoc.undocumented,REMOVED #smalldoc.undocumented a{color:#B0C0C0;font-style:italic}REMOVED #smalldoc table caption{font:.571pt "Lucida Grande","Lucida",Helvetica,sans-serif;font-weight:bold}REMOVED #smalldoc table tr td{font:.571pt "Lucida Grande","Lucida",Helvetica,sans-serif;color:#808080}</style>
  </head>
  <body>
    <div id="smalldoc" >
    </div><script>
// START:UMD_MODULE_PREAMBLE
(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(["exports"], factory);
	} else if (typeof exports !== "undefined") {
		factory(exports);
	} else {
		var mod = {exports: {}};
		factory(mod.exports);
		global.actual = mod.exports;
	}
})(this, function (exports) {
	Object.defineProperty(exports, "__esModule", {value: true});
	var html = exports; var __module__ = html;
// END:UMD_MODULE_PREAMBLE

__module__ = typeof(html) === undefined ? {} : html;
__module__.NAMESPACE=__module__.namespace=null;
__module__.NAMESPACES=__module__.namespaces={"svg": "http://www.w3.org/2000/svg", "html": "http://www.w3.org/1999/xhtml", "xlink": "http://www.w3.org/1999/xlink"};
__module__._=function(name, args){
	if (__module__.NAMESPACE){
		var node   = document.createElementNS(null, name);
	} else {
		var node   = document.createElement(name);
	}
	/* Appends the given value to the node */
	var append = function (node, value ) {
		if      ( value == undefined ) {
			return;
		}
		else if ( typeof(value) == "string" ) {
			node.appendChild(document.createTextNode(value));
		}
		else if ( typeof(value) == "object" && typeof(value.jquery) != "undefined" ) {
			for ( var j=0 ; j<value.length ; j++ )
			{ append(node, value[j]); }
		}
		else if ( typeof(value) == "object" && typeof(value.nodeType) != "undefined" ) {
			node.appendChild(value);
		}
		else if ( typeof(value) == "object" && value instanceof Array ) {
			for ( var j=0 ; j<value.length ; j++ )
			{ append(node, value[j]); }
		}
		else {
			var has_properties = false;
			for ( var k in value ) {
				var ns  = null;
				var dot = k.lastIndexOf(":");
				var v   = value[k];
				if (dot>=0) {
					ns = k.substr(0,dot);
					ns = __module__.NAMESPACES[ns] || ns;
					k  = k.substr(dot+1,k.length);
				}
				if ( k == "_" || k == "_class" || k == "klass" ) { k = "class" }
				if (ns) { node.setAttributeNS(ns, k, v); }
				else    { node.setAttribute  (    k, v); }
				has_properties = true;
			}
			if (!has_properties)
			{ node.appendChild(document.createTextNode("" + value)); }
		}
	}
	// Iterates through the arguments, and appends the content
	for ( var i = 0 ; i < args.length ; i ++ )
	{
		append(node, args[i]);
	}
	return node;
}
/* TAGS:START */
__module__.address=function(){return __module__._('address', arguments)};
__module__.applet=function(){return __module__._('applet', arguments)};
__module__.area=function(){return __module__._('area', arguments)};
__module__.a=function(){return __module__._('a', arguments)};
__module__.base=function(){return __module__._('base', arguments)};
__module__.basefont=function(){return __module__._('basefont', arguments)};
__module__.big=function(){return __module__._('big', arguments)};
__module__.blockquote=function(){return __module__._('blockquote', arguments)};
__module__.body=function(){return __module__._('body', arguments)};
__module__.br=function(){return __module__._('br', arguments)};
__module__.b=function(){return __module__._('b', arguments)};
__module__.caption=function(){return __module__._('caption', arguments)};
__module__.center=function(){return __module__._('center', arguments)};
__module__.cite=function(){return __module__._('cite', arguments)};
__module__.code=function(){return __module__._('code', arguments)};
__module__.dd=function(){return __module__._('dd', arguments)};
__module__.dfn=function(){return __module__._('dfn', arguments)};
__module__.dir=function(){return __module__._('dir', arguments)};
__module__.div=function(){return __module__._('div', arguments)};
__module__.dl=function(){return __module__._('dl', arguments)};
__module__.dt=function(){return __module__._('dt', arguments)};
__module__.em=function(){return __module__._('em', arguments)};
__module__.font=function(){return __module__._('font', arguments)};
__module__.form=function(){return __module__._('form', arguments)};
__module__.h1=function(){return __module__._('h1', arguments)};
__module__.h2=function(){return __module__._('h2', arguments)};
__module__.h3=function(){return __module__._('h3', arguments)};
__module__.h4=function(){return __module__._('h4', arguments)};
__module__.h5=function(){return __module__._('h5', arguments)};
__module__.h6=function(){return __module__._('h6', arguments)};
__module__.head=function(){return __module__._('head', arguments)};
__module__.hr=function(){return __module__._('hr', arguments)};
__module__.html=function(){return __module__._('html', arguments)};
__module__.img=function(){return __module__._('img', arguments)};
__module__.input=function(){return __module__._('input', arguments)};
__module__.isindex=function(){return __module__._('isindex', arguments)};
__module__.i=function(){return __module__._('i', arguments)};
__module__.kbd=function(){return __module__._('kbd', arguments)};
__module__.link=function(){return __module__._('link', arguments)};
__module__.li=function(){return __module__._('li', arguments)};
__module__.map=function(){return __module__._('map', arguments)};
__module__.menu=function(){return __module__._('menu', arguments)};
__module__.meta=function(){return __module__._('meta', arguments)};
__module__.ol=function(){return __module__._('ol', arguments)};
__module__.option=function(){return __module__._('option', arguments)};
__module__.param=function(){return __module__._('param', arguments)};
__module__.pre=function(){return __module__._('pre', arguments)};
__module__.p=function(){return __module__._('p', arguments)};
__module__.samp=function(){return __module__._('samp', arguments)};
__module__.script=function(){return __module__._('script', arguments)};
__module__.select=function(){return __module__._('select', arguments)};
__module__.small=function(){return __module__._('small', arguments)};
__module__.strike=function(){return __module__._('strike', arguments)};
__module__.strong=function(){return __module__._('strong', arguments)};
__module__.style=function(){return __module__._('style', arguments)};
__module__.sub=function(){return __module__._('sub', arguments)};
__module__.sup=function(){return __module__._('sup', arguments)};
__module__.table=function(){return __module__._('table', arguments)};
__module__.td=function(){return __module__._('td', arguments)};
__module__.textarea=function(){return __module__._('textarea', arguments)};
__module__.th=function(){return __module__._('th', arguments)};
__module__.title=function(){return __module__._('title', arguments)};
__module__.tr=function(){return __module__._('tr', arguments)};
__module__.tt=function(){return __module__._('tt', arguments)};
__module__.ul=function(){return __module__._('ul', arguments)};
__module__.u=function(){return __module__._('u', arguments)};
__module__['var']=__module__._var=function(){return __module__._('var', arguments)};
__module__.a=function(){return __module__._('a', arguments)};
__module__.abbr=function(){return __module__._('abbr', arguments)};
__module__.acronym=function(){return __module__._('acronym', arguments)};
__module__.address=function(){return __module__._('address', arguments)};
__module__.applet=function(){return __module__._('applet', arguments)};
__module__.area=function(){return __module__._('area', arguments)};
__module__.article=function(){return __module__._('article', arguments)};
__module__.aside=function(){return __module__._('aside', arguments)};
__module__.audio=function(){return __module__._('audio', arguments)};
__module__.b=function(){return __module__._('b', arguments)};
__module__.base=function(){return __module__._('base', arguments)};
__module__.basefont=function(){return __module__._('basefont', arguments)};
__module__.bdo=function(){return __module__._('bdo', arguments)};
__module__.big=function(){return __module__._('big', arguments)};
__module__.blockquote=function(){return __module__._('blockquote', arguments)};
__module__.body=function(){return __module__._('body', arguments)};
__module__.br=function(){return __module__._('br', arguments)};
__module__.button=function(){return __module__._('button', arguments)};
__module__.canvas=function(){return __module__._('canvas', arguments)};
__module__.caption=function(){return __module__._('caption', arguments)};
__module__.center=function(){return __module__._('center', arguments)};
__module__.cite=function(){return __module__._('cite', arguments)};
__module__.code=function(){return __module__._('code', arguments)};
__module__.col=function(){return __module__._('col', arguments)};
__module__.colgroup=function(){return __module__._('colgroup', arguments)};
__module__.command=function(){return __module__._('command', arguments)};
__module__.datalist=function(){return __module__._('datalist', arguments)};
__module__.dd=function(){return __module__._('dd', arguments)};
__module__.del=function(){return __module__._('del', arguments)};
__module__.details=function(){return __module__._('details', arguments)};
__module__.dfn=function(){return __module__._('dfn', arguments)};
__module__.dir=function(){return __module__._('dir', arguments)};
__module__.div=function(){return __module__._('div', arguments)};
__module__.dl=function(){return __module__._('dl', arguments)};
__module__.dt=function(){return __module__._('dt', arguments)};
__module__.em=function(){return __module__._('em', arguments)};
__module__.embed=function(){return __module__._('embed', arguments)};
__module__.fieldset=function(){return __module__._('fieldset', arguments)};
__module__.figcaption=function(){return __module__._('figcaption', arguments)};
__module__.figure=function(){return __module__._('figure', arguments)};
__module__.font=function(){return __module__._('font', arguments)};
__module__.footer=function(){return __module__._('footer', arguments)};
__module__.form=function(){return __module__._('form', arguments)};
__module__.frame=function(){return __module__._('frame', arguments)};
__module__.frameset=function(){return __module__._('frameset', arguments)};
__module__.h1=function(){return __module__._('h1', arguments)};
__module__.head=function(){return __module__._('head', arguments)};
__module__.header=function(){return __module__._('header', arguments)};
__module__.hgroup=function(){return __module__._('hgroup', arguments)};
__module__.hr=function(){return __module__._('hr', arguments)};
__module__.html=function(){return __module__._('html', arguments)};
__module__.i=function(){return __module__._('i', arguments)};
__module__.iframe=function(){return __module__._('iframe', arguments)};
__module__.img=function(){return __module__._('img', arguments)};
__module__.input=function(){return __module__._('input', arguments)};
__module__.ins=function(){return __module__._('ins', arguments)};
__module__.keygen=function(){return __module__._('keygen', arguments)};
__module__.kbd=function(){return __module__._('kbd', arguments)};
__module__.label=function(){return __module__._('label', arguments)};
__module__.legend=function(){return __module__._('legend', arguments)};
__module__.li=function(){return __module__._('li', arguments)};
__module__.link=function(){return __module__._('link', arguments)};
__module__.map=function(){return __module__._('map', arguments)};
__module__.mark=function(){return __module__._('mark', arguments)};
__module__.menu=function(){return __module__._('menu', arguments)};
__module__.meta=function(){return __module__._('meta', arguments)};
__module__.meter=function(){return __module__._('meter', arguments)};
__module__.nav=function(){return __module__._('nav', arguments)};
__module__.noframes=function(){return __module__._('noframes', arguments)};
__module__.noscript=function(){return __module__._('noscript', arguments)};
__module__.object=function(){return __module__._('object', arguments)};
__module__.ol=function(){return __module__._('ol', arguments)};
__module__.optgroup=function(){return __module__._('optgroup', arguments)};
__module__.option=function(){return __module__._('option', arguments)};
__module__.output=function(){return __module__._('output', arguments)};
__module__.p=function(){return __module__._('p', arguments)};
__module__.param=function(){return __module__._('param', arguments)};
__module__.pre=function(){return __module__._('pre', arguments)};
__module__.progress=function(){return __module__._('progress', arguments)};
__module__.q=function(){return __module__._('q', arguments)};
__module__.rp=function(){return __module__._('rp', arguments)};
__module__.rt=function(){return __module__._('rt', arguments)};
__module__.ruby=function(){return __module__._('ruby', arguments)};
__module__.s=function(){return __module__._('s', arguments)};
__module__.samp=function(){return __module__._('samp', arguments)};
__module__.script=function(){return __module__._('script', arguments)};
__module__.section=function(){return __module__._('section', arguments)};
__module__.select=function(){return __module__._('select', arguments)};
__module__.small=function(){return __module__._('small', arguments)};
__module__.source=function(){return __module__._('source', arguments)};
__module__.span=function(){return __module__._('span', arguments)};
__module__.strike=function(){return __module__._('strike', arguments)};
__module__.strong=function(){return __module__._('strong', arguments)};
__module__.style=function(){return __module__._('style', arguments)};
__module__.sub=function(){return __module__._('sub', arguments)};
__module__.summary=function(){return __module__._('summary', arguments)};
__module__.sup=function(){return __module__._('sup', arguments)};
__module__.table=function(){return __module__._('table', arguments)};
__module__.tbody=function(){return __module__._('tbody', arguments)};
__module__.td=function(){return __module__._('td', arguments)};
__module__.textarea=function(){return __module__._('textarea', arguments)};
__module__.tfoot=function(){return __module__._('tfoot', arguments)};
__module__.th=function(){return __module__._('th', arguments)};
__module__.thead=function(){return __module__._('thead', arguments)};
__module__.time=function(){return __module__._('time', arguments)};
__module__.title=function(){return __module__._('title', arguments)};
__module__.tr=function(){return __module__._('tr', arguments)};
__module__.tt=function(){return __module__._('tt', arguments)};
__module__.u=function(){return __module__._('u', arguments)};
__module__.ul=function(){return __module__._('ul', arguments)};
__module__['var']=__module__._var=function(){return __module__._('var', arguments)};
__module__.video=function(){return __module__._('video', arguments)};
__module__.wbr=function(){return __module__._('wbr', arguments)};
__module__.xmp=function(){return __module__._('xmp', arguments)};
/* TAGS:END */

// START:UMD_MODULE_POSTAMBLE
Object.assign(exports, __module__);
if (typeof extend !== "undefined") {extend.module("html", __module__)}
if (typeof window !== "undefined") {window.html = __module__;}
return exports;
})
// END:UMD_MODULE_POSTAMBLE

</script><script>var $jscomp={scope:{},findInternal:function(b,a,c){b instanceof String&&(b=String(b));for(var d=b.length,e=0;e<d;e++){var f=b[e];if(a.call(c,f,e,b))return{i:e,v:f}}return{i:-1,v:void 0}}};$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(b,a,c){if(c.get||c.set)throw new TypeError("ES3 does not support getters and setters.");b!=Array.prototype&&b!=Object.prototype&&(b[a]=c.value)};
$jscomp.getGlobal=function(b){return"undefined"!=typeof window&&window===b?b:"undefined"!=typeof global&&null!=global?global:b};$jscomp.global=$jscomp.getGlobal(this);$jscomp.polyfill=function(b,a,c,d){if(a){c=$jscomp.global;b=b.split(".");for(d=0;d<b.length-1;d++){var e=b[d];e in c||(c[e]={});c=c[e]}b=b[b.length-1];d=c[b];a=a(d);a!=d&&null!=a&&$jscomp.defineProperty(c,b,{configurable:!0,writable:!0,value:a})}};
$jscomp.polyfill("Array.prototype.find",function(b){return b?b:function(b,c){return $jscomp.findInternal(this,b,c).v}},"es6-impl","es3");var smalldoc="undefined"!=typeof extend?extend.module("smalldoc"):"undefined"!=typeof smalldoc?smalldoc:{};
(function(b){b.DATA=null;b.STATE={active:[],symbols:{}};b.GROUPS="parent;module;class;class constructor;class attribute;class method;attribute;method;function;value".split(";");b.loadCSS=function(){document.head.appendChild(html.link({href:"https://fonts.googleapis.com/css?family=Fira+Mono|Fira+Sans",rel:"stylesheet"}))};b.load=function(a){void 0===a&&(a="data.json");fetch(a).then(function(c){return c.json().then(b.setup)})};b.setup=function(a){void 0===a&&(a=b.DATA);b.DATA=a;var c=function(b,c,a){var d=
document.getElementById(b);d||(d=html.div({id:b}),a&&a(d),c.appendChild(d));return d},d=c("smalldoc",document.body);c("containers",d);c("description",d);c("hidden",d);c("about",d,function(b){b.innerHTML="<a href='https://github.com/sebastien/smalldoc'>smalldoc</a>"});b.render(a);window.addEventListener("hashchange",b.onHashChange);b.onHashChange()};b.render=function(a){b.renderContainer(a,"Smalldoc")};b.show=function(a){b._clearContainers();b._showContainer("__root__");(a||"").split(".").reduce(function(a,
c){return b._showContainer(a?a+"."+c:c)},"");var c=b.STATE.symbols[a];c?b.renderDescription(c):console.warn("smalldoc.show: Cannot find symbol `"+a+"`")};b.onHashChange=function(a){b.show(window.location.hash.substr(1))};b.renderDescription=function(a){for(var c=document.getElementById("description");c.firstChild;)c.removeChild(c.firstChild);var d=a.id.split("."),e=d.pop();c.appendChild(html.div({_:"overview"},html.h1(html.span({_:"type"},b._getGroup(a)),html.span({_:"parents"},d.map(function(b){return html.span({_:"parent name"},
b)})),html.span({_:"name"},a.name||e))));a.representation&&(d=html.div({_:"representation"}),d.innerHTML=a.representation,c.appendChild(d));d=html.div({_:"documentation"});d.innerHTML=a.documentation||"<div class='undocumented'>Undocumented</div>";c.appendChild(d);a=b.renderRelations(a);console.log(a);c.appendChild(a)};b.renderContainer=function(a,c){var d=(a.id||a.name||"__root__").split(".");return b._addContainer(html.div({_:"container","data-type":a.type||"generic",id:a.id||a.name||"__root__"},
html.div({_:"name"},html.a({href:"#"+(1<d.length?d[d.length-2]:"__root__")},c)),b._getGroups(a.children).map(function(a){return b.renderGroup(a[1],a[0])})))};b.renderGroup=function(a,c){return html.div({_:"group"},html.div({_:"title","data-key":c.split(" ").join("-").toLowerCase()},c),b.renderSlots(a))};b.renderSlots=function(a){return html.ul({_:"slots"},a.map(function(a){a[1].children&&b.renderContainer(a[1],a[1].id||a[0]);b.STATE.symbols[a[1].id||a[0]]=a[1];return html.div({_:"slot"+(a[1].documentation?
"":" undocumented"),"data-type":a[1].type,id:"slot:"+(a[1].id||a[0])},html.a({href:"#"+a[1].id||a[0]},a[0]))}))};b.renderRelations=function(a){var c=[],d=(a.relations||[]).reduce(function(a,b){var d=b[0];-1==c.indexOf(d)&&c.push(d);console.log("R",b,":",a);void 0===a[d]&&(a[d]=[]);a[d].push(b);return a},{});return html.div({_:"relations"},c.sort().map(function(a){return html.div({_:"relation","data-type":a},html.h2(a),html.ul(d[a].map(function(a){return html.li(b.renderRelation(a))})))}))};b.renderRelation=
function(a){return"defined"==a[0]?html.span({_:"defined"},html.span({_:"name","data-type":b._getGroup(b.STATE.symbols[a[1]])},html.a({href:"#"+a[1]},a[1]))):null};b._getGroup=function(a){return b.GROUPS.find(function(b){return-1<(a.tags||[]).indexOf(b)})||a.type||"value"};b._getGroups=function(a,c){void 0===c&&(c=!0);var d=a.reduce(function(a,c){var d=b._getGroup(c[1]);void 0===a[d]&&(a[d]=[]);a[d].push(c);return a},{});return b.GROUPS.reduce(function(a,b){var e=d[b];"object"==typeof e&&(c&&e.sort(function(a,
b){return a[0].localeCompare(b[0])}),a.push([b,e]));return a},[])};b._addContainer=function(a,b){void 0===b&&(b="hidden");var c=document.getElementById(b);c.firstChild?c.insertBefore(a,c.firstChild):c.appendChild(a);return a};b._clearContainers=function(){for(var a=document.getElementById("containers"),c=document.getElementById("hidden");0<b.STATE.active.length;)b.STATE.active.pop().classList.remove("active");for(;a.firstChild;)c.appendChild(a.firstChild)};b._showContainer=function(a){var c=document.getElementById(a),
d=document.getElementById("slot:"+a);d&&(b.STATE.active.push(d),d.classList.add("active"));c?document.getElementById("containers").appendChild(c):console.warn("smalldoc: cannot find container `"+a+"`");return a};b.init=function(){};"undefined"!=typeof b.init&&b.init();return b})(smalldoc);
;smalldoc.setup({"children": [["eq.core", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='23'><p class='TEXTO N2' ostart='0' oend='23'>This is the core module</p></div>\n\t\n\t", "type": "module", "children": [["LICENSE", {"type": "value", "name": "LICENSE", "relations": [["defined", "eq.core"], ["defines", "LICENSE", "eq.core.LICENSE"]], "id": "eq.core.LICENSE"}], ["$", {"type": "value", "name": "$", "relations": [["defined", "eq.core"], ["defines", "$", "eq.core.$"]], "id": "eq.core.$"}], ["API", {"type": "value", "name": "API", "relations": [["defined", "eq.core"], ["defines", "API", "eq.core.API"]], "id": "eq.core.API"}], ["TRACKER", {"type": "value", "name": "TRACKER", "relations": [["defined", "eq.core"], ["defines", "TRACKER", "eq.core.TRACKER"]], "id": "eq.core.TRACKER"}], ["TOPICS_CACHE", {"type": "value", "name": "TOPICS_CACHE", "relations": [["defined", "eq.core"], ["defines", "TOPICS_CACHE", "eq.core.TOPICS_CACHE"]], "id": "eq.core.TOPICS_CACHE"}], ["MIDS_CACHE", {"type": "value", "name": "MIDS_CACHE", "relations": [["defined", "eq.core"], ["defines", "MIDS_CACHE", "eq.core.MIDS_CACHE"]], "id": "eq.core.MIDS_CACHE"}], ["ON", {"type": "value", "name": "ON", "relations": [["defined", "eq.core"], ["defines", "ON", "eq.core.ON"]], "id": "eq.core.ON"}], ["LABEL_INPUT_ALL", {"type": "value", "name": "LABEL_INPUT_ALL", "relations": [["defined", "eq.core"], ["defines", "LABEL_INPUT_ALL", "eq.core.LABEL_INPUT_ALL"]], "id": "eq.core.LABEL_INPUT_ALL"}], ["LABEL_INPUT_MANY", {"type": "value", "name": "LABEL_INPUT_MANY", "relations": [["defined", "eq.core"], ["defines", "LABEL_INPUT_MANY", "eq.core.LABEL_INPUT_MANY"]], "id": "eq.core.LABEL_INPUT_MANY"}], ["LABEL_INPUT_TYPE", {"type": "value", "name": "LABEL_INPUT_TYPE", "relations": [["defined", "eq.core"], ["defines", "LABEL_INPUT_TYPE", "eq.core.LABEL_INPUT_TYPE"]], "id": "eq.core.LABEL_INPUT_TYPE"}], ["INPUT_TIME_RANGES", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='39'><p class='TEXTO N2' ostart='0' oend='39'>The list of pre-selectable time ranges.</p></div>\n\t\n\t", "type": "value", "name": "INPUT_TIME_RANGES", "relations": [["defined", "eq.core"], ["defines", "INPUT_TIME_RANGES", "eq.core.INPUT_TIME_RANGES"]], "id": "eq.core.INPUT_TIME_RANGES"}], ["INPUT_COMPARISON", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='78'><p class='TEXTO N2' ostart='0' oend='78'>The list of all the inputs types that can be used for comparison in Google EQ.</p></div>\n\t\n\t", "type": "value", "name": "INPUT_COMPARISON", "relations": [["defined", "eq.core"], ["defines", "INPUT_COMPARISON", "eq.core.INPUT_COMPARISON"]], "id": "eq.core.INPUT_COMPARISON"}], ["InputExtractor", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='94'><p class='TEXTO N2' ostart='0' oend='94'>Extracts option data for the the given input types. This can be seen as an adapter to the API.</p></div>\n\t\n\t", "type": "class", "children": [["TYPES_WITH_DEFAULTS", {"id": "eq.core.InputExtractor.TYPES_WITH_DEFAULTS", "type": "value", "name": "TYPES_WITH_DEFAULTS", "relations": [["defined", "eq.core.InputExtractor"], ["defines", "TYPES_WITH_DEFAULTS", "eq.core.InputExtractor.TYPES_WITH_DEFAULTS"]], "tags": ["class attribute"]}], ["API_EXTRACTORS", {"id": "eq.core.InputExtractor.API_EXTRACTORS", "type": "value", "name": "API_EXTRACTORS", "relations": [["defined", "eq.core.InputExtractor"], ["defines", "API_EXTRACTORS", "eq.core.InputExtractor.API_EXTRACTORS"]], "tags": ["class attribute"]}], ["Extract", {"representation": "<span class='name'>Extract</span><span class='arguments'><span class='argument'>type:String</span><span class='argument'>query</span><span class='argument'>queryDefaults</span></span>", "type": "function", "id": "eq.core.InputExtractor.Extract", "relations": [["arguments", ["type:String", "query", "queryDefaults"]], ["defined", "eq.core.InputExtractor"], ["defines", "Extract", "eq.core.InputExtractor.Extract"]], "tags": ["class method"]}], ["_MergeDefaults", {"representation": "<span class='name'>_MergeDefaults</span><span class='arguments'><span class='argument'>type</span><span class='argument'>query</span><span class='argument'>queryDefaults</span></span>", "type": "function", "id": "eq.core.InputExtractor._MergeDefaults", "relations": [["arguments", ["type", "query", "queryDefaults"]], ["defined", "eq.core.InputExtractor"], ["defines", "_MergeDefaults", "eq.core.InputExtractor._MergeDefaults"]], "tags": ["class method"]}]], "relations": [["defined", "eq.core"], ["defines", "InputExtractor", "eq.core.InputExtractor"]], "id": "eq.core.InputExtractor"}], ["InputMenu", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='338'><p class='TEXTO N2' ostart='0' oend='133'>Input menus are a enhanced version of the <code>widgets.Selector</code> class, supporting features such as options menu, filtering and focusing.</p><p class='TEXTO N4' ostart='135' oend='338'>The data format used by the input menu for its options <code>{value, label}</code> while querying its value will return either an <code>value</code> when <code>options.multiple=false</code> or a <code>[value,\u2025]</code> when <code>options.multiple=true</code>.</p></div>\n\t\n\t", "type": "class", "children": [["OPTIONS", {"id": "eq.core.InputMenu.OPTIONS", "type": "value", "name": "OPTIONS", "relations": [["defined", "eq.core.InputMenu"], ["defines", "OPTIONS", "eq.core.InputMenu.OPTIONS"]], "tags": ["class attribute"]}], ["STATES", {"id": "eq.core.InputMenu.STATES", "type": "value", "name": "STATES", "relations": [["defined", "eq.core.InputMenu"], ["defines", "STATES", "eq.core.InputMenu.STATES"]], "tags": ["class attribute"]}], ["UIS", {"id": "eq.core.InputMenu.UIS", "type": "value", "name": "UIS", "relations": [["defined", "eq.core.InputMenu"], ["defines", "UIS", "eq.core.InputMenu.UIS"]], "tags": ["class attribute"]}], ["on", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='111'><p class='TEXTO N2' ostart='0' oend='111'>NOTE: customPressed is currently used in inputPeriod, this is a bit sloppy, but we can't dynamically add events</p></div>\n\t\n\t", "type": "value", "name": "on", "relations": [["defined", "eq.core.InputMenu"], ["defines", "on", "eq.core.InputMenu.on"]], "id": "eq.core.InputMenu.on"}], ["handlers", {"type": "value", "name": "handlers", "relations": [["defined", "eq.core.InputMenu"], ["defines", "handlers", "eq.core.InputMenu.handlers"]], "id": "eq.core.InputMenu.handlers"}], ["cache", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='64'><p class='TEXTO N2' ostart='0' oend='64'>prevSelection: Is the selection when the user expanded the menu.</p></div>\n\t\n\t", "type": "value", "name": "cache", "relations": [["defined", "eq.core.InputMenu"], ["defines", "cache", "eq.core.InputMenu.cache"]], "id": "eq.core.InputMenu.cache"}], ["keymaps", {"type": "value", "name": "keymaps", "relations": [["defined", "eq.core.InputMenu"], ["defines", "keymaps", "eq.core.InputMenu.keymaps"]], "id": "eq.core.InputMenu.keymaps"}], ["selection", {"type": "value", "name": "selection", "relations": [["defined", "eq.core.InputMenu"], ["defines", "selection", "eq.core.InputMenu.selection"]], "id": "eq.core.InputMenu.selection"}], ["tooltip", {"type": "value", "name": "tooltip", "relations": [["defined", "eq.core.InputMenu"], ["defines", "tooltip", "eq.core.InputMenu.tooltip"]], "id": "eq.core.InputMenu.tooltip"}], ["focusPosition", {"type": "value", "name": "focusPosition", "relations": [["defined", "eq.core.InputMenu"], ["defines", "focusPosition", "eq.core.InputMenu.focusPosition"]], "id": "eq.core.InputMenu.focusPosition"}], ["bindUI", {"representation": "<span class='name'>bindUI</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputMenu.bindUI", "relations": [["arguments", []], ["defined", "eq.core.InputMenu"], ["defines", "bindUI", "eq.core.InputMenu.bindUI"]], "tags": ["method"]}], ["setMenu", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='148'><p class='TEXTO N2' ostart='0' oend='148'>Sets the menu currently in use by this input. This will replace the <code>uis.menu</code> with the given ui and reload the options based on <code>type=options.type</code></p></div>\n\t\n\t", "relations": [["arguments", ["menu", "type"]], ["defined", "eq.core.InputMenu"], ["defines", "setMenu", "eq.core.InputMenu.setMenu"]], "representation": "<span class='name'>setMenu</span><span class='arguments'><span class='argument'>menu</span><span class='argument'>type</span></span>", "type": "function", "id": "eq.core.InputMenu.setMenu"}], ["setState", {"representation": "<span class='name'>setState</span><span class='arguments'><span class='argument'>name</span><span class='argument'>value</span></span>", "type": "function", "id": "eq.core.InputMenu.setState", "relations": [["arguments", ["name", "value"]], ["defined", "eq.core.InputMenu"], ["defines", "setState", "eq.core.InputMenu.setState"]], "tags": ["method"]}], ["setEditable", {"representation": "<span class='name'>setEditable</span><span class='arguments'><span class='argument'>value</span></span>", "type": "function", "id": "eq.core.InputMenu.setEditable", "relations": [["arguments", ["value"]], ["defined", "eq.core.InputMenu"], ["defines", "setEditable", "eq.core.InputMenu.setEditable"]], "tags": ["method"]}], ["loadOptions", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='192'><p class='TEXTO N2' ostart='0' oend='192'>Loads the data for the given type (<code>options type</code> by default), looking up in the <code>INPUT_EXTRACTORS</code> map for an extractor function. The extracted value can be either a future or a single value.</p></div>\n\t\n\t", "relations": [["arguments", ["type"]], ["defined", "eq.core.InputMenu"], ["defines", "loadOptions", "eq.core.InputMenu.loadOptions"]], "representation": "<span class='name'>loadOptions</span><span class='arguments'><span class='argument'>type</span></span>", "type": "function", "id": "eq.core.InputMenu.loadOptions"}], ["refreshOptions", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='59'><p class='TEXTO N2' ostart='0' oend='59'>Refreshes the list of options, preserving the current value</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.InputMenu"], ["defines", "refreshOptions", "eq.core.InputMenu.refreshOptions"]], "representation": "<span class='name'>refreshOptions</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputMenu.refreshOptions"}], ["_loadOptions", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='70'><p class='TEXTO N2' ostart='0' oend='70'>An abstract function that returns the options as a {label,value} list.</p></div>\n\t\n\t", "relations": [["arguments", ["type"]], ["defined", "eq.core.InputMenu"], ["defines", "_loadOptions", "eq.core.InputMenu._loadOptions"]], "representation": "<span class='name'>_loadOptions</span><span class='arguments'><span class='argument'>type</span></span>", "type": "function", "id": "eq.core.InputMenu._loadOptions"}], ["setInputOptions", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='40'><p class='TEXTO N2' ostart='0' oend='40'>The expected format is <code>[{value,label}]</code></p></div>\n\t\n\t", "relations": [["arguments", ["data"]], ["defined", "eq.core.InputMenu"], ["defines", "setInputOptions", "eq.core.InputMenu.setInputOptions"]], "representation": "<span class='name'>setInputOptions</span><span class='arguments'><span class='argument'>data</span></span>", "type": "function", "id": "eq.core.InputMenu.setInputOptions"}], ["createGroupOptions", {"representation": "<span class='name'>createGroupOptions</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputMenu.createGroupOptions", "relations": [["arguments", []], ["defined", "eq.core.InputMenu"], ["defines", "createGroupOptions", "eq.core.InputMenu.createGroupOptions"]], "tags": ["method"]}], ["getGroupOptions", {"representation": "<span class='name'>getGroupOptions</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputMenu.getGroupOptions", "relations": [["arguments", []], ["defined", "eq.core.InputMenu"], ["defines", "getGroupOptions", "eq.core.InputMenu.getGroupOptions"]], "tags": ["method"]}], ["getInputOptions", {"representation": "<span class='name'>getInputOptions</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputMenu.getInputOptions", "relations": [["arguments", []], ["defined", "eq.core.InputMenu"], ["defines", "getInputOptions", "eq.core.InputMenu.getInputOptions"]], "tags": ["method"]}], ["getInputOptionsCount", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='35'><p class='TEXTO N2' ostart='0' oend='35'>Returns the number of input options</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.InputMenu"], ["defines", "getInputOptionsCount", "eq.core.InputMenu.getInputOptionsCount"]], "representation": "<span class='name'>getInputOptionsCount</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputMenu.getInputOptionsCount"}], ["_renderOptions", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='43'><p class='TEXTO N2' ostart='0' oend='43'>Renders the options displayed in this input</p></div>\n\t\n\t", "relations": [["arguments", ["groupOptions", "inputOptions"]], ["defined", "eq.core.InputMenu"], ["defines", "_renderOptions", "eq.core.InputMenu._renderOptions"]], "representation": "<span class='name'>_renderOptions</span><span class='arguments'><span class='argument'>groupOptions</span><span class='argument'>inputOptions</span></span>", "type": "function", "id": "eq.core.InputMenu._renderOptions"}], ["_matchOption", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='162'><p class='TEXTO N2' ostart='0' oend='162'>Matches the given option. This will always match the <code>all</code> option for multiple inputs, will discard options without a label and will apply the filter if defined.</p></div>\n\t\n\t", "relations": [["arguments", ["value", "index"]], ["defined", "eq.core.InputMenu"], ["defines", "_matchOption", "eq.core.InputMenu._matchOption"]], "representation": "<span class='name'>_matchOption</span><span class='arguments'><span class='argument'>value</span><span class='argument'>index</span></span>", "type": "function", "id": "eq.core.InputMenu._matchOption"}], ["_renderOption", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='99'><p class='TEXTO N2' ostart='0' oend='99'>Render the options, toggling the <code>selected</code> and <code>filtered</code> classes of the UIS based on their state.</p></div>\n\t\n\t", "relations": [["arguments", ["context", "datum", "index", "nui"]], ["defined", "eq.core.InputMenu"], ["defines", "_renderOption", "eq.core.InputMenu._renderOption"]], "representation": "<span class='name'>_renderOption</span><span class='arguments'><span class='argument'>context</span><span class='argument'>datum</span><span class='argument'>index</span><span class='argument'>nui</span></span>", "type": "function", "id": "eq.core.InputMenu._renderOption"}], ["_removeOption", {"representation": "<span class='name'>_removeOption</span><span class='arguments'><span class='argument'>context</span><span class='argument'>index</span><span class='argument'>nui</span></span>", "type": "function", "id": "eq.core.InputMenu._removeOption", "relations": [["arguments", ["context", "index", "nui"]], ["defined", "eq.core.InputMenu"], ["defines", "_removeOption", "eq.core.InputMenu._removeOption"]], "tags": ["method"]}], ["filter", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='97'><p class='TEXTO N2' ostart='0' oend='97'>Filters the visible results based on the input. The match happens on the <code>_[1]</code> (label) property.</p></div>\n\t\n\t", "relations": [["arguments", ["query", "limit"]], ["defined", "eq.core.InputMenu"], ["defines", "filter", "eq.core.InputMenu.filter"]], "representation": "<span class='name'>filter</span><span class='arguments'><span class='argument'>query</span><span class='argument'>limit</span></span>", "type": "function", "id": "eq.core.InputMenu.filter"}], ["setValue", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='127'><p class='TEXTO N2' ostart='0' oend='127'>Sets the value for this input. The value can be either a string or a list of string, each corresponding to the <code>id</code> of options.</p></div>\n\t\n\t", "relations": [["arguments", ["value", "triggerChange"]], ["defined", "eq.core.InputMenu"], ["defines", "setValue", "eq.core.InputMenu.setValue"]], "representation": "<span class='name'>setValue</span><span class='arguments'><span class='argument'>value</span><span class='argument'>triggerChange</span></span>", "type": "function", "id": "eq.core.InputMenu.setValue"}], ["getValue", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='319'><p class='TEXTO N2' ostart='0' oend='215'>Returns the current value for this input field. This will return a list of options id if the input has <code>options.multiple</code>, <code>options.all</code> if all is selected, otherwise will return a single value or <code>None</code> if nothing.</p><p class='TEXTO N6' ostart='217' oend='319'>This method can be used to normalize the given value. Otherwise, it will return the current selection.</p></div>\n\t\n\t", "relations": [["arguments", ["value"]], ["defined", "eq.core.InputMenu"], ["defines", "getValue", "eq.core.InputMenu.getValue"]], "representation": "<span class='name'>getValue</span><span class='arguments'><span class='argument'>value</span></span>", "type": "function", "id": "eq.core.InputMenu.getValue"}], ["isAllOptions", {"representation": "<span class='name'>isAllOptions</span><span class='arguments'><span class='argument'>value</span></span>", "type": "function", "id": "eq.core.InputMenu.isAllOptions", "relations": [["arguments", ["value"]], ["defined", "eq.core.InputMenu"], ["defines", "isAllOptions", "eq.core.InputMenu.isAllOptions"]], "tags": ["method"]}], ["getFilterValue", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='70'><p class='TEXTO N2' ostart='0' oend='70'>Returns the current filter query as a string or <code>None</code> if not defined.</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.InputMenu"], ["defines", "getFilterValue", "eq.core.InputMenu.getFilterValue"]], "representation": "<span class='name'>getFilterValue</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputMenu.getFilterValue"}], ["_updateValue", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='281'><p class='TEXTO N2' ostart='0' oend='281'>Normalizes the value for this input menu. This is called by <code>setInputOptions</code> once the options have been loaded, but can be used to force a normalization of the value anytime. It is equivalent to <code>setValue(getValue())</code> by default, but can be overriden (see InputQuery._updateValue)</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.InputMenu"], ["defines", "_updateValue", "eq.core.InputMenu._updateValue"]], "representation": "<span class='name'>_updateValue</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputMenu._updateValue"}], ["getLabel", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='47'><p class='TEXTO N2' ostart='0' oend='47'>Returns the label that matches the given value.</p></div>\n\t\n\t", "relations": [["arguments", ["value"]], ["defined", "eq.core.InputMenu"], ["defines", "getLabel", "eq.core.InputMenu.getLabel"]], "representation": "<span class='name'>getLabel</span><span class='arguments'><span class='argument'>value</span></span>", "type": "function", "id": "eq.core.InputMenu.getLabel"}], ["getSelectedValues", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='123'><p class='TEXTO N2' ostart='0' oend='123'>While <code>getValue</code> can return <code>all</code> as a value, the <code>getSelectedValues</code> will return the explicit list of all selected values.</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.InputMenu"], ["defines", "getSelectedValues", "eq.core.InputMenu.getSelectedValues"]], "representation": "<span class='name'>getSelectedValues</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputMenu.getSelectedValues"}], ["getAllValues", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='65'><p class='TEXTO N2' ostart='0' oend='65'>Returns the list of possible values that can be set in this input</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.InputMenu"], ["defines", "getAllValues", "eq.core.InputMenu.getAllValues"]], "representation": "<span class='name'>getAllValues</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputMenu.getAllValues"}], ["hasValue", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='45'><p class='TEXTO N2' ostart='0' oend='45'>Tells if the given value is in the selection.</p></div>\n\t\n\t", "relations": [["arguments", ["value"]], ["defined", "eq.core.InputMenu"], ["defines", "hasValue", "eq.core.InputMenu.hasValue"]], "representation": "<span class='name'>hasValue</span><span class='arguments'><span class='argument'>value</span></span>", "type": "function", "id": "eq.core.InputMenu.hasValue"}], ["hasAllValues", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='32'><p class='TEXTO N2' ostart='0' oend='32'>Tells if all values are selected</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.InputMenu"], ["defines", "hasAllValues", "eq.core.InputMenu.hasAllValues"]], "representation": "<span class='name'>hasAllValues</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputMenu.hasAllValues"}], ["getValuesCount", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='35'><p class='TEXTO N2' ostart='0' oend='35'>Count the number of selected values</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.InputMenu"], ["defines", "getValuesCount", "eq.core.InputMenu.getValuesCount"]], "representation": "<span class='name'>getValuesCount</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputMenu.getValuesCount"}], ["addValue", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='39'><p class='TEXTO N2' ostart='0' oend='39'>Adds the given value from the selection</p></div>\n\t\n\t", "relations": [["arguments", ["value"]], ["defined", "eq.core.InputMenu"], ["defines", "addValue", "eq.core.InputMenu.addValue"]], "representation": "<span class='name'>addValue</span><span class='arguments'><span class='argument'>value</span></span>", "type": "function", "id": "eq.core.InputMenu.addValue"}], ["removeValue", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='100'><p class='TEXTO N2' ostart='0' oend='100'>Removes the given value from the selection, only if there is more than one element in the selection.</p></div>\n\t\n\t", "relations": [["arguments", ["value"]], ["defined", "eq.core.InputMenu"], ["defines", "removeValue", "eq.core.InputMenu.removeValue"]], "representation": "<span class='name'>removeValue</span><span class='arguments'><span class='argument'>value</span></span>", "type": "function", "id": "eq.core.InputMenu.removeValue"}], ["toggleValue", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='131'><p class='TEXTO N2' ostart='0' oend='131'>Toggles the given value from the selection. If all the values are set, the the selection will be cleared and the value will be set.</p></div>\n\t\n\t", "relations": [["arguments", ["value"]], ["defined", "eq.core.InputMenu"], ["defines", "toggleValue", "eq.core.InputMenu.toggleValue"]], "representation": "<span class='name'>toggleValue</span><span class='arguments'><span class='argument'>value</span></span>", "type": "function", "id": "eq.core.InputMenu.toggleValue"}], ["focus", {"representation": "<span class='name'>focus</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputMenu.focus", "relations": [["arguments", []], ["defined", "eq.core.InputMenu"], ["defines", "focus", "eq.core.InputMenu.focus"]], "tags": ["method"]}], ["expand", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='57'><p class='TEXTO N2' ostart='0' oend='57'>Expands this input, showing the menu with all its options</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.InputMenu"], ["defines", "expand", "eq.core.InputMenu.expand"]], "representation": "<span class='name'>expand</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputMenu.expand"}], ["cancel", {"representation": "<span class='name'>cancel</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputMenu.cancel", "relations": [["arguments", []], ["defined", "eq.core.InputMenu"], ["defines", "cancel", "eq.core.InputMenu.cancel"]], "tags": ["method"]}], ["collapse", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='58'><p class='TEXTO N2' ostart='0' oend='58'>Collapses this input, hiding the menu with all its options</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.InputMenu"], ["defines", "collapse", "eq.core.InputMenu.collapse"]], "representation": "<span class='name'>collapse</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputMenu.collapse"}], ["selectOption", {"representation": "<span class='name'>selectOption</span><span class='arguments'><span class='argument'>index</span></span>", "type": "function", "id": "eq.core.InputMenu.selectOption", "relations": [["arguments", ["index"]], ["defined", "eq.core.InputMenu"], ["defines", "selectOption", "eq.core.InputMenu.selectOption"]], "tags": ["method"]}], ["resetFocus", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='39'><p class='TEXTO N2' ostart='0' oend='39'>Sets the focus to the original position</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.InputMenu"], ["defines", "resetFocus", "eq.core.InputMenu.resetFocus"]], "representation": "<span class='name'>resetFocus</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputMenu.resetFocus"}], ["focusAt", {"representation": "<span class='name'>focusAt</span><span class='arguments'><span class='argument'>index</span></span>", "type": "function", "id": "eq.core.InputMenu.focusAt", "relations": [["arguments", ["index"]], ["defined", "eq.core.InputMenu"], ["defines", "focusAt", "eq.core.InputMenu.focusAt"]], "tags": ["method"]}], ["focusNext", {"representation": "<span class='name'>focusNext</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputMenu.focusNext", "relations": [["arguments", []], ["defined", "eq.core.InputMenu"], ["defines", "focusNext", "eq.core.InputMenu.focusNext"]], "tags": ["method"]}], ["focusPrevious", {"representation": "<span class='name'>focusPrevious</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputMenu.focusPrevious", "relations": [["arguments", []], ["defined", "eq.core.InputMenu"], ["defines", "focusPrevious", "eq.core.InputMenu.focusPrevious"]], "tags": ["method"]}], ["renderFocus", {"representation": "<span class='name'>renderFocus</span><span class='arguments'><span class='argument'>index</span></span>", "type": "function", "id": "eq.core.InputMenu.renderFocus", "relations": [["arguments", ["index"]], ["defined", "eq.core.InputMenu"], ["defines", "renderFocus", "eq.core.InputMenu.renderFocus"]], "tags": ["method"]}], ["focusSelect", {"representation": "<span class='name'>focusSelect</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputMenu.focusSelect", "relations": [["arguments", []], ["defined", "eq.core.InputMenu"], ["defines", "focusSelect", "eq.core.InputMenu.focusSelect"]], "tags": ["method"]}], ["onOptionPress", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='52'><p class='TEXTO N2' ostart='0' oend='52'>Toogles or set the value of the option being pressed</p></div>\n\t\n\t", "relations": [["arguments", ["event"]], ["defined", "eq.core.InputMenu"], ["defines", "onOptionPress", "eq.core.InputMenu.onOptionPress"]], "representation": "<span class='name'>onOptionPress</span><span class='arguments'><span class='argument'>event</span></span>", "type": "function", "id": "eq.core.InputMenu.onOptionPress"}], ["onDocumentPress", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='56'><p class='TEXTO N2' ostart='0' oend='56'>Collapses the input when the press is made anywhere else</p></div>\n\t\n\t", "relations": [["arguments", ["event"]], ["defined", "eq.core.InputMenu"], ["defines", "onDocumentPress", "eq.core.InputMenu.onDocumentPress"]], "representation": "<span class='name'>onDocumentPress</span><span class='arguments'><span class='argument'>event</span></span>", "type": "function", "id": "eq.core.InputMenu.onDocumentPress"}], ["onFilterKeyUp", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='55'><p class='TEXTO N2' ostart='0' oend='55'>Triggered when keyboard is pressed in the input fields.</p></div>\n\t\n\t", "relations": [["arguments", ["event"]], ["defined", "eq.core.InputMenu"], ["defines", "onFilterKeyUp", "eq.core.InputMenu.onFilterKeyUp"]], "representation": "<span class='name'>onFilterKeyUp</span><span class='arguments'><span class='argument'>event</span></span>", "type": "function", "id": "eq.core.InputMenu.onFilterKeyUp"}], ["onMouseIn", {"representation": "<span class='name'>onMouseIn</span><span class='arguments'><span class='argument'>event</span></span>", "type": "function", "id": "eq.core.InputMenu.onMouseIn", "relations": [["arguments", ["event"]], ["defined", "eq.core.InputMenu"], ["defines", "onMouseIn", "eq.core.InputMenu.onMouseIn"]], "tags": ["method"]}], ["onMouseOut", {"representation": "<span class='name'>onMouseOut</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputMenu.onMouseOut", "relations": [["arguments", []], ["defined", "eq.core.InputMenu"], ["defines", "onMouseOut", "eq.core.InputMenu.onMouseOut"]], "tags": ["method"]}]], "relations": [["defined", "eq.core"], ["defines", "InputMenu", "eq.core.InputMenu"]], "id": "eq.core.InputMenu"}], ["InputBarChart", {"type": "class", "children": [["_renderOption", {"representation": "<span class='name'>_renderOption</span><span class='arguments'><span class='argument'>context</span><span class='argument'>datum</span><span class='argument'>index</span><span class='argument'>nui</span></span>", "type": "function", "id": "eq.core.InputBarChart._renderOption", "relations": [["arguments", ["context", "datum", "index", "nui"]], ["defined", "eq.core.InputBarChart"], ["defines", "_renderOption", "eq.core.InputBarChart._renderOption"]], "tags": ["method"]}]], "relations": [["defined", "eq.core"], ["defines", "InputBarChart", "eq.core.InputBarChart"]], "id": "eq.core.InputBarChart"}], ["InputQuery", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='213'><p class='TEXTO N2' ostart='0' oend='213'>Users can enter a text query (stored in the <code>filter</code> field), which is then resolved to a <code>{mid,label,description}</code>. The <code>getValue()</code> will return <code>{mid:Undefined,label:get \"filter\"}</code> when the query is not resolved.</p></div>\n\t\n\t", "type": "class", "children": [["OPTIONS", {"id": "eq.core.InputQuery.OPTIONS", "type": "value", "name": "OPTIONS", "relations": [["defined", "eq.core.InputQuery"], ["defines", "OPTIONS", "eq.core.InputQuery.OPTIONS"]], "tags": ["class attribute"]}], ["setDefaultOptions", {"representation": "<span class='name'>setDefaultOptions</span><span class='arguments'><span class='argument'>options</span></span>", "type": "function", "id": "eq.core.InputQuery.setDefaultOptions", "relations": [["arguments", ["options"]], ["defined", "eq.core.InputQuery"], ["defines", "setDefaultOptions", "eq.core.InputQuery.setDefaultOptions"]], "tags": ["method"]}], ["getDefaultOptions", {"representation": "<span class='name'>getDefaultOptions</span><span class='arguments'><span class='argument'>options</span></span>", "type": "function", "id": "eq.core.InputQuery.getDefaultOptions", "relations": [["arguments", ["options"]], ["defined", "eq.core.InputQuery"], ["defines", "getDefaultOptions", "eq.core.InputQuery.getDefaultOptions"]], "tags": ["method"]}], ["setState", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='83'><p class='TEXTO N2' ostart='0' oend='83'>Whenever the input is collapsed, we force setting the value to the matching option.</p></div>\n\t\n\t", "relations": [["arguments", ["name", "value"]], ["defined", "eq.core.InputQuery"], ["defines", "setState", "eq.core.InputQuery.setState"]], "representation": "<span class='name'>setState</span><span class='arguments'><span class='argument'>name</span><span class='argument'>value</span></span>", "type": "function", "id": "eq.core.InputQuery.setState"}], ["_loadOptions", {"representation": "<span class='name'>_loadOptions</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputQuery._loadOptions", "relations": [["arguments", []], ["defined", "eq.core.InputQuery"], ["defines", "_loadOptions", "eq.core.InputQuery._loadOptions"]], "tags": ["method"]}], ["_matchOption", {"representation": "<span class='name'>_matchOption</span><span class='arguments'><span class='argument'>value</span><span class='argument'>index</span></span>", "type": "function", "id": "eq.core.InputQuery._matchOption", "relations": [["arguments", ["value", "index"]], ["defined", "eq.core.InputQuery"], ["defines", "_matchOption", "eq.core.InputQuery._matchOption"]], "tags": ["method"]}], ["setValue", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='159'><p class='TEXTO N2' ostart='0' oend='159'>Sets the given value. If it is a string, it will look for the matching option, otherwise it will use the object as the current value even if there is no match.</p></div>\n\t\n\t", "relations": [["arguments", ["value", "triggerChange"]], ["defined", "eq.core.InputQuery"], ["defines", "setValue", "eq.core.InputQuery.setValue"]], "representation": "<span class='name'>setValue</span><span class='arguments'><span class='argument'>value</span><span class='argument'>triggerChange</span></span>", "type": "function", "id": "eq.core.InputQuery.setValue"}], ["focusSelect", {"representation": "<span class='name'>focusSelect</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputQuery.focusSelect", "relations": [["arguments", []], ["defined", "eq.core.InputQuery"], ["defines", "focusSelect", "eq.core.InputQuery.focusSelect"]], "tags": ["method"]}], ["_updateValue", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='63'><p class='TEXTO N2' ostart='0' oend='63'>We always keep the value as it is while the widget is expanded.</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.InputQuery"], ["defines", "_updateValue", "eq.core.InputQuery._updateValue"]], "representation": "<span class='name'>_updateValue</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputQuery._updateValue"}], ["getMatchingOption", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='168'><p class='TEXTO N2' ostart='0' oend='168'>Returns the first option that matches the given query, which is by default the <code>getFilterValue()</code>. The query can be either a a string or the actual value of the option.</p></div>\n\t\n\t", "relations": [["arguments", ["query", "options"]], ["defined", "eq.core.InputQuery"], ["defines", "getMatchingOption", "eq.core.InputQuery.getMatchingOption"]], "representation": "<span class='name'>getMatchingOption</span><span class='arguments'><span class='argument'>query</span><span class='argument'>options</span></span>", "type": "function", "id": "eq.core.InputQuery.getMatchingOption"}], ["_renderOption", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='28'><p class='TEXTO N2' ostart='0' oend='28'>Render the filtered options.</p></div>\n\t\n\t", "relations": [["arguments", ["context", "datum", "index", "nui"]], ["defined", "eq.core.InputQuery"], ["defines", "_renderOption", "eq.core.InputQuery._renderOption"]], "representation": "<span class='name'>_renderOption</span><span class='arguments'><span class='argument'>context</span><span class='argument'>datum</span><span class='argument'>index</span><span class='argument'>nui</span></span>", "type": "function", "id": "eq.core.InputQuery._renderOption"}], ["focus", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='62'><p class='TEXTO N2' ostart='0' oend='62'>We only set the focused state and we don't expand the options.</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.InputQuery"], ["defines", "focus", "eq.core.InputQuery.focus"]], "representation": "<span class='name'>focus</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputQuery.focus"}], ["expand", {"representation": "<span class='name'>expand</span><span class='arguments'></span>", "type": "function", "id": "eq.core.InputQuery.expand", "relations": [["arguments", []], ["defined", "eq.core.InputQuery"], ["defines", "expand", "eq.core.InputQuery.expand"]], "tags": ["method"]}], ["onFilterKeyUp", {"representation": "<span class='name'>onFilterKeyUp</span><span class='arguments'><span class='argument'>event</span></span>", "type": "function", "id": "eq.core.InputQuery.onFilterKeyUp", "relations": [["arguments", ["event"]], ["defined", "eq.core.InputQuery"], ["defines", "onFilterKeyUp", "eq.core.InputQuery.onFilterKeyUp"]], "tags": ["method"]}], ["onMouseIn", {"representation": "<span class='name'>onMouseIn</span><span class='arguments'><span class='argument'>event</span></span>", "type": "function", "id": "eq.core.InputQuery.onMouseIn", "relations": [["arguments", ["event"]], ["defined", "eq.core.InputQuery"], ["defines", "onMouseIn", "eq.core.InputQuery.onMouseIn"]], "tags": ["method"]}]], "relations": [["defined", "eq.core"], ["defines", "InputQuery", "eq.core.InputQuery"]], "id": "eq.core.InputQuery"}], ["Emotions", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='134'><p class='TEXTO N2' ostart='0' oend='134'>Wraps useful methods and properties of emotions. This acts as a single-point interface to manipulating and visualizing emotional data.</p></div>\n\t\n\t", "type": "class", "children": [["PRIMARY", {"id": "eq.core.Emotions.PRIMARY", "type": "value", "name": "PRIMARY", "relations": [["defined", "eq.core.Emotions"], ["defines", "PRIMARY", "eq.core.Emotions.PRIMARY"]], "tags": ["class attribute"]}], ["SECONDARY", {"id": "eq.core.Emotions.SECONDARY", "type": "value", "name": "SECONDARY", "relations": [["defined", "eq.core.Emotions"], ["defines", "SECONDARY", "eq.core.Emotions.SECONDARY"]], "tags": ["class attribute"]}], ["ALL", {"id": "eq.core.Emotions.ALL", "type": "value", "name": "ALL", "relations": [["defined", "eq.core.Emotions"], ["defines", "ALL", "eq.core.Emotions.ALL"]], "tags": ["class attribute"]}], ["EMOTION_NORM", {"id": "eq.core.Emotions.EMOTION_NORM", "type": "value", "name": "EMOTION_NORM", "relations": [["defined", "eq.core.Emotions"], ["defines", "EMOTION_NORM", "eq.core.Emotions.EMOTION_NORM"]], "tags": ["class attribute"]}], ["CATEGORIES", {"id": "eq.core.Emotions.CATEGORIES", "type": "value", "name": "CATEGORIES", "relations": [["defined", "eq.core.Emotions"], ["defines", "CATEGORIES", "eq.core.Emotions.CATEGORIES"]], "tags": ["class attribute"]}], ["Top", {"representation": "<span class='name'>Top</span><span class='arguments'><span class='argument'>emotions</span><span class='argument'>count</span></span>", "type": "function", "id": "eq.core.Emotions.Top", "relations": [["arguments", ["emotions", "count"]], ["defined", "eq.core.Emotions"], ["defines", "Top", "eq.core.Emotions.Top"]], "tags": ["class method"]}]], "relations": [["defined", "eq.core"], ["defines", "Emotions", "eq.core.Emotions"]], "id": "eq.core.Emotions"}], ["State", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='123'><p class='TEXTO N2' ostart='0' oend='123'>Stores the current application state in the URL and provides convenience methods to retrieve queries from the URL directly.</p></div>\n\t\n\t", "type": "class", "children": [["QUERY_REVERSE", {"id": "eq.core.State.QUERY_REVERSE", "type": "value", "name": "QUERY_REVERSE", "relations": [["defined", "eq.core.State"], ["defines", "QUERY_REVERSE", "eq.core.State.QUERY_REVERSE"]], "tags": ["class attribute"]}], ["QUERY", {"id": "eq.core.State.QUERY", "type": "value", "name": "QUERY", "relations": [["defined", "eq.core.State"], ["defines", "QUERY", "eq.core.State.QUERY"]], "tags": ["class attribute"]}], ["DEFAULTS", {"id": "eq.core.State.DEFAULTS", "type": "value", "name": "DEFAULTS", "relations": [["defined", "eq.core.State"], ["defines", "DEFAULTS", "eq.core.State.DEFAULTS"]], "tags": ["class attribute"]}], ["getQueryParameters", {"representation": "<span class='name'>getQueryParameters</span><span class='arguments'></span>", "type": "function", "id": "eq.core.State.getQueryParameters", "relations": [["arguments", []], ["defined", "eq.core.State"], ["defines", "getQueryParameters", "eq.core.State.getQueryParameters"]], "tags": ["method"]}], ["getKey", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='68'><p class='TEXTO N2' ostart='0' oend='68'>Returns the URL parameter key for the given name (ex: <code>query</code> \u2192 <code>q</code>)</p></div>\n\t\n\t", "relations": [["arguments", ["name"]], ["defined", "eq.core.State"], ["defines", "getKey", "eq.core.State.getKey"]], "representation": "<span class='name'>getKey</span><span class='arguments'><span class='argument'>name</span></span>", "type": "function", "id": "eq.core.State.getKey"}], ["fromKey", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='78'><p class='TEXTO N2' ostart='0' oend='78'>Returns the full parameter name from the URL parameter key (ex: <code>q</code> \u2192 <code>query</code>)</p></div>\n\t\n\t", "relations": [["arguments", ["name"]], ["defined", "eq.core.State"], ["defines", "fromKey", "eq.core.State.fromKey"]], "representation": "<span class='name'>fromKey</span><span class='arguments'><span class='argument'>name</span></span>", "type": "function", "id": "eq.core.State.fromKey"}], ["hasGlobalFiltersChanged", {"representation": "<span class='name'>hasGlobalFiltersChanged</span><span class='arguments'><span class='argument'>event</span></span>", "type": "function", "id": "eq.core.State.hasGlobalFiltersChanged", "relations": [["arguments", ["event"]], ["defined", "eq.core.State"], ["defines", "hasGlobalFiltersChanged", "eq.core.State.hasGlobalFiltersChanged"]], "tags": ["method"]}], ["getQueries", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='46'><p class='TEXTO N2' ostart='0' oend='46'>Returns the list of queries defined in the URL</p></div>\n\t\n\t", "relations": [["arguments", ["limit"]], ["defined", "eq.core.State"], ["defines", "getQueries", "eq.core.State.getQueries"]], "representation": "<span class='name'>getQueries</span><span class='arguments'><span class='argument'>limit</span></span>", "type": "function", "id": "eq.core.State.getQueries"}], ["getQuery", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='160'><p class='TEXTO N2' ostart='0' oend='160'>Extracts the query with the given index from the current URL parameters. This returns a map of {mid,source,country,age,gender,affinity,emotion,start,end,topic}.</p></div>\n\t\n\t", "relations": [["arguments", ["index"]], ["defined", "eq.core.State"], ["defines", "getQuery", "eq.core.State.getQuery"]], "representation": "<span class='name'>getQuery</span><span class='arguments'><span class='argument'>index</span></span>", "type": "function", "id": "eq.core.State.getQuery"}], ["hasQuery", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='89'><p class='TEXTO N2' ostart='0' oend='89'>Tells if any of the given parameters can be identified as the query with the given index.</p></div>\n\t\n\t", "relations": [["arguments", ["index"]], ["defined", "eq.core.State"], ["defines", "hasQuery", "eq.core.State.hasQuery"]], "representation": "<span class='name'>hasQuery</span><span class='arguments'><span class='argument'>index</span></span>", "type": "function", "id": "eq.core.State.hasQuery"}], ["getQueryCount", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='59'><p class='TEXTO N2' ostart='0' oend='59'>Returns the number of queries defined in the URL parameters</p></div>\n\t\n\t", "relations": [["arguments", ["limit"]], ["defined", "eq.core.State"], ["defines", "getQueryCount", "eq.core.State.getQueryCount"]], "representation": "<span class='name'>getQueryCount</span><span class='arguments'><span class='argument'>limit</span></span>", "type": "function", "id": "eq.core.State.getQueryCount"}], ["serialize", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='49'><p class='TEXTO N2' ostart='0' oend='49'>Serializes the given value bound to the given key</p></div>\n\t\n\t", "relations": [["arguments", ["value", "key"]], ["defined", "eq.core.State"], ["defines", "serialize", "eq.core.State.serialize"]], "representation": "<span class='name'>serialize</span><span class='arguments'><span class='argument'>value</span><span class='argument'>key</span></span>", "type": "function", "id": "eq.core.State.serialize"}], ["deserialize", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='51'><p class='TEXTO N2' ostart='0' oend='51'>Deserializes the given value bound to the given key</p></div>\n\t\n\t", "relations": [["arguments", ["value", "key"]], ["defined", "eq.core.State"], ["defines", "deserialize", "eq.core.State.deserialize"]], "representation": "<span class='name'>deserialize</span><span class='arguments'><span class='argument'>value</span><span class='argument'>key</span></span>", "type": "function", "id": "eq.core.State.deserialize"}]], "relations": [["defined", "eq.core"], ["defines", "State", "eq.core.State"]], "id": "eq.core.State"}], ["Tracker", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='190'><p class='TEXTO N2' ostart='0' oend='190'>NOTE: GA does operate on a token bucket algorithm where it starts with 20 hits and replenishes at 2 hits per second. But, it won't process new data if it gets down to 0 tokens in the bucket.</p></div>\n\t\n\t", "type": "class", "children": [["options", {"type": "value", "name": "options", "relations": [["defined", "eq.core.Tracker"], ["defines", "options", "eq.core.Tracker.options"]], "id": "eq.core.Tracker.options"}], ["tokens", {"type": "value", "name": "tokens", "relations": [["defined", "eq.core.Tracker"], ["defines", "tokens", "eq.core.Tracker.tokens"]], "id": "eq.core.Tracker.tokens"}], ["queue", {"type": "value", "name": "queue", "relations": [["defined", "eq.core.Tracker"], ["defines", "queue", "eq.core.Tracker.queue"]], "id": "eq.core.Tracker.queue"}], ["loop", {"type": "value", "name": "loop", "relations": [["defined", "eq.core.Tracker"], ["defines", "loop", "eq.core.Tracker.loop"]], "id": "eq.core.Tracker.loop"}], ["__init__", {"representation": "<span class='name'>__init__</span><span class='arguments'></span>", "type": "function", "id": "eq.core.Tracker.__init__", "relations": [["arguments", []], ["defined", "eq.core.Tracker"], ["defines", "__init__", "eq.core.Tracker.__init__"]], "tags": ["class constructor"]}], ["track", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='75'><p class='TEXTO N2' ostart='0' oend='75'>Here we send the analytics request directly or we queue it to send it later</p></div>\n\t\n\t", "relations": [["arguments", ["tag", "type", "category", "action", "label", "value", "fields"]], ["defined", "eq.core.Tracker"], ["defines", "track", "eq.core.Tracker.track"]], "representation": "<span class='name'>track</span><span class='arguments'><span class='argument'>tag</span><span class='argument'>type</span><span class='argument'>category</span><span class='argument'>action</span><span class='argument'>label</span><span class='argument'>value</span><span class='argument'>fields</span></span>", "type": "function", "id": "eq.core.Tracker.track"}], ["_track", {"representation": "<span class='name'>_track</span><span class='arguments'><span class='argument'>tag</span><span class='argument'>type</span><span class='argument'>category</span><span class='argument'>action</span><span class='argument'>label</span><span class='argument'>value</span><span class='argument'>fields</span></span>", "type": "function", "id": "eq.core.Tracker._track", "relations": [["arguments", ["tag", "type", "category", "action", "label", "value", "fields"]], ["defined", "eq.core.Tracker"], ["defines", "_track", "eq.core.Tracker._track"]], "tags": ["method"]}], ["trackEvent", {"representation": "<span class='name'>trackEvent</span><span class='arguments'><span class='argument'>category</span><span class='argument'>action</span><span class='argument'>label</span><span class='argument'>value</span><span class='argument'>fields</span></span>", "type": "function", "id": "eq.core.Tracker.trackEvent", "relations": [["arguments", ["category", "action", "label", "value", "fields"]], ["defined", "eq.core.Tracker"], ["defines", "trackEvent", "eq.core.Tracker.trackEvent"]], "tags": ["method"]}], ["trackPage", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='46'><p class='TEXTO N2' ostart='0' oend='46'>Sets the current page and triggers a page view</p></div>\n\t\n\t", "relations": [["arguments", ["page", "fields"]], ["defined", "eq.core.Tracker"], ["defines", "trackPage", "eq.core.Tracker.trackPage"]], "representation": "<span class='name'>trackPage</span><span class='arguments'><span class='argument'>page</span><span class='argument'>fields</span></span>", "type": "function", "id": "eq.core.Tracker.trackPage"}], ["trackTiming", {"representation": "<span class='name'>trackTiming</span><span class='arguments'><span class='argument'>category</span><span class='argument'>variable</span><span class='argument'>value</span><span class='argument'>label</span></span>", "type": "function", "id": "eq.core.Tracker.trackTiming", "relations": [["arguments", ["category", "variable", "value", "label"]], ["defined", "eq.core.Tracker"], ["defines", "trackTiming", "eq.core.Tracker.trackTiming"]], "tags": ["method"]}], ["trackMetric", {"representation": "<span class='name'>trackMetric</span><span class='arguments'><span class='argument'>name</span><span class='argument'>value</span></span>", "type": "function", "id": "eq.core.Tracker.trackMetric", "relations": [["arguments", ["name", "value"]], ["defined", "eq.core.Tracker"], ["defines", "trackMetric", "eq.core.Tracker.trackMetric"]], "tags": ["method"]}], ["_sendEvent", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='45'><p class='TEXTO N2' ostart='0' oend='45'>Here we run the callback and replenish tokens</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.Tracker"], ["defines", "_sendEvent", "eq.core.Tracker._sendEvent"]], "representation": "<span class='name'>_sendEvent</span><span class='arguments'></span>", "type": "function", "id": "eq.core.Tracker._sendEvent"}]], "relations": [["defined", "eq.core"], ["defines", "Tracker", "eq.core.Tracker"]], "id": "eq.core.Tracker"}], ["Connector", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='33'><p class='TEXTO N2' ostart='0' oend='33'>Interfaces with the Google EQ API</p></div>\n\t\n\t", "type": "class", "children": [["RE_MID", {"id": "eq.core.Connector.RE_MID", "type": "value", "name": "RE_MID", "relations": [["defined", "eq.core.Connector"], ["defines", "RE_MID", "eq.core.Connector.RE_MID"]], "tags": ["class attribute"]}], ["OPTIONS", {"id": "eq.core.Connector.OPTIONS", "type": "value", "name": "OPTIONS", "relations": [["defined", "eq.core.Connector"], ["defines", "OPTIONS", "eq.core.Connector.OPTIONS"]], "tags": ["class attribute"]}], ["SEPARATOR", {"name": "SEPARATOR", "tags": ["class attribute"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='148'><p class='TEXTO N2' ostart='0' oend='148'>The separator for multiple selection (used in the URL). This could potentially have collisions if a key contains a <code>,</code> we can easily change it here.</p></div>\n\t\n\t", "relations": [["defined", "eq.core.Connector"], ["defines", "SEPARATOR", "eq.core.Connector.SEPARATOR"]], "type": "value", "id": "eq.core.Connector.SEPARATOR"}], ["ENDPOINT_PARAMETERS", {"id": "eq.core.Connector.ENDPOINT_PARAMETERS", "type": "value", "name": "ENDPOINT_PARAMETERS", "relations": [["defined", "eq.core.Connector"], ["defines", "ENDPOINT_PARAMETERS", "eq.core.Connector.ENDPOINT_PARAMETERS"]], "tags": ["class attribute"]}], ["ENDPOINTS", {"name": "ENDPOINTS", "tags": ["class attribute"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='189'><p class='TEXTO N2' ostart='0' oend='189'>The endpoints offered by Google EQ's API <a href=\"https://apis-explorer.appspot.com/apis-explorer/?base=https://testv3-dot-moneyball-v2-backend-dot-moneyball-1600.appspot.com/_ah/api#s/moneyball/v3/\" target=\"_blank\">https://apis-explorer.appspot.com/apis-explorer/?base=https://testv3-dot-moneyball-v2-backend-dot-moneyball-1600.appspot.com/_ah/api#s/moneyball/v3/</a></p></div>\n\t\n\t", "relations": [["defined", "eq.core.Connector"], ["defines", "ENDPOINTS", "eq.core.Connector.ENDPOINTS"]], "type": "value", "id": "eq.core.Connector.ENDPOINTS"}], ["SOURCES", {"id": "eq.core.Connector.SOURCES", "type": "value", "name": "SOURCES", "relations": [["defined", "eq.core.Connector"], ["defines", "SOURCES", "eq.core.Connector.SOURCES"]], "tags": ["class attribute"]}], ["apiCache", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='23'><p class='TEXTO N2' ostart='0' oend='23'>We persist the API data</p></div>\n\t\n\t", "type": "value", "name": "apiCache", "relations": [["defined", "eq.core.Connector"], ["defines", "apiCache", "eq.core.Connector.apiCache"]], "id": "eq.core.Connector.apiCache"}], ["recent", {"type": "value", "name": "recent", "relations": [["defined", "eq.core.Connector"], ["defines", "recent", "eq.core.Connector.recent"]], "id": "eq.core.Connector.recent"}], ["_gettingAuthentication", {"type": "value", "name": "_gettingAuthentication", "relations": [["defined", "eq.core.Connector"], ["defines", "_gettingAuthentication", "eq.core.Connector._gettingAuthentication"]], "id": "eq.core.Connector._gettingAuthentication"}], ["clear", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='39'><p class='TEXTO N2' ostart='0' oend='39'>Clears all the stored/cache information</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.Connector"], ["defines", "clear", "eq.core.Connector.clear"]], "representation": "<span class='name'>clear</span><span class='arguments'></span>", "type": "function", "id": "eq.core.Connector.clear"}], ["clean", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='29'><p class='TEXTO N2' ostart='0' oend='29'>Cleans the cached information</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.Connector"], ["defines", "clean", "eq.core.Connector.clean"]], "representation": "<span class='name'>clean</span><span class='arguments'></span>", "type": "function", "id": "eq.core.Connector.clean"}], ["__init__", {"representation": "<span class='name'>__init__</span><span class='arguments'><span class='argument'>options</span></span>", "type": "function", "id": "eq.core.Connector.__init__", "relations": [["arguments", ["options"]], ["defined", "eq.core.Connector"], ["defines", "__init__", "eq.core.Connector.__init__"]], "tags": ["class constructor"]}], ["getAllMIDs", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='85'><p class='TEXTO N2' ostart='0' oend='85'>Queries the <code>all_mids</code> endpoint. This does not take into account any query parameter.</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.Connector"], ["defines", "getAllMIDs", "eq.core.Connector.getAllMIDs"]], "representation": "<span class='name'>getAllMIDs</span><span class='arguments'></span>", "type": "function", "id": "eq.core.Connector.getAllMIDs"}], ["getMIDs", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='161'><p class='TEXTO N2' ostart='0' oend='161'>Queries the <code>search_mids</code> endpoint. This does not take into account any query parameter expect the queried element given as a string. This call bypasses caching.</p></div>\n\t\n\t", "relations": [["arguments", ["query"]], ["defined", "eq.core.Connector"], ["defines", "getMIDs", "eq.core.Connector.getMIDs"]], "representation": "<span class='name'>getMIDs</span><span class='arguments'><span class='argument'>query</span></span>", "type": "function", "id": "eq.core.Connector.getMIDs"}], ["getAllSources", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='88'><p class='TEXTO N2' ostart='0' oend='88'>Queries the <code>all_sources</code> endpoint. This does not take into account any query parameter.</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.Connector"], ["defines", "getAllSources", "eq.core.Connector.getAllSources"]], "representation": "<span class='name'>getAllSources</span><span class='arguments'></span>", "type": "function", "id": "eq.core.Connector.getAllSources"}], ["getSources", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='76'><p class='TEXTO N2' ostart='0' oend='76'>Queries the <code>sources</code> endpoint, using the current URL parameters by default.</p></div>\n\t\n\t", "relations": [["arguments", ["query"]], ["defined", "eq.core.Connector"], ["defines", "getSources", "eq.core.Connector.getSources"]], "representation": "<span class='name'>getSources</span><span class='arguments'><span class='argument'>query</span></span>", "type": "function", "id": "eq.core.Connector.getSources"}], ["getSourceTypes", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='159'><p class='TEXTO N2' ostart='0' oend='159'>Queries the <code>types</code> endpoint, using the current URL parameters by default. This will remvoe any <code>source</code> parameter from the default query if no query is given.</p></div>\n\t\n\t", "relations": [["arguments", ["query"]], ["defined", "eq.core.Connector"], ["defines", "getSourceTypes", "eq.core.Connector.getSourceTypes"]], "representation": "<span class='name'>getSourceTypes</span><span class='arguments'><span class='argument'>query</span></span>", "type": "function", "id": "eq.core.Connector.getSourceTypes"}], ["getDemographics", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='104'><p class='TEXTO N2' ostart='0' oend='104'>Returns a value similar to <code>[{country:\"united states\",age:\"18-24\",proportion:0.0058,gender:\"female\"},\u2025]</code></p></div>\n\t\n\t", "relations": [["arguments", ["query"]], ["defined", "eq.core.Connector"], ["defines", "getDemographics", "eq.core.Connector.getDemographics"]], "representation": "<span class='name'>getDemographics</span><span class='arguments'><span class='argument'>query</span></span>", "type": "function", "id": "eq.core.Connector.getDemographics"}], ["getAffinities", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='162'><p class='TEXTO N2' ostart='0' oend='162'>Queries the <code>affinities</code> endpoint, returning <code>[{proportion:Float,label:String}]</code> When <code>withDefault=True</code>, the default values (set to 0) will be added to the list.</p></div>\n\t\n\t", "relations": [["arguments", ["query"]], ["defined", "eq.core.Connector"], ["defines", "getAffinities", "eq.core.Connector.getAffinities"]], "representation": "<span class='name'>getAffinities</span><span class='arguments'><span class='argument'>query</span></span>", "type": "function", "id": "eq.core.Connector.getAffinities"}], ["getSentences", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='203'><p class='TEXTO N2' ostart='0' oend='203'>Queries the <code>sentences</code> endpoint, returning <code>[{date,primary_emotion,secondary_emotion,sentiment,source,text,type,url}]</code> Note that this endpoint is not cached as it would otherwise consume too much space.</p></div>\n\t\n\t", "relations": [["arguments", ["query", "count"]], ["defined", "eq.core.Connector"], ["defines", "getSentences", "eq.core.Connector.getSentences"]], "representation": "<span class='name'>getSentences</span><span class='arguments'><span class='argument'>query</span><span class='argument'>count</span></span>", "type": "function", "id": "eq.core.Connector.getSentences"}], ["getSentencesCount", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='115'><p class='TEXTO N2' ostart='0' oend='115'>Queries the <code>count</code> endpoint, returning <code>[{date,primary_emotion,secondary_emotion,sentiment,source,text,type,url}]</code></p></div>\n\t\n\t", "relations": [["arguments", ["query"]], ["defined", "eq.core.Connector"], ["defines", "getSentencesCount", "eq.core.Connector.getSentencesCount"]], "representation": "<span class='name'>getSentencesCount</span><span class='arguments'><span class='argument'>query</span></span>", "type": "function", "id": "eq.core.Connector.getSentencesCount"}], ["getSentiment", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='177'><p class='TEXTO N2' ostart='0' oend='177'>Queries the <code>sentences</code> endpoint, returning <code>[{date,volume,sentiment:{primary,secondary}}]</code>. The <code>scale</code> parameter of the query will be automatically added if not there already.</p></div>\n\t\n\t", "relations": [["arguments", ["query"]], ["defined", "eq.core.Connector"], ["defines", "getSentiment", "eq.core.Connector.getSentiment"]], "representation": "<span class='name'>getSentiment</span><span class='arguments'><span class='argument'>query</span></span>", "type": "function", "id": "eq.core.Connector.getSentiment"}], ["getOverallSentiment", {"representation": "<span class='name'>getOverallSentiment</span><span class='arguments'><span class='argument'>query</span></span>", "type": "function", "id": "eq.core.Connector.getOverallSentiment", "relations": [["arguments", ["query"]], ["defined", "eq.core.Connector"], ["defines", "getOverallSentiment", "eq.core.Connector.getOverallSentiment"]], "tags": ["method"]}], ["getTopics", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='101'><p class='TEXTO N2' ostart='0' oend='101'>Queries the <code>topic</code> endpoint, returning <code>[{topic_id,label,volume,keyword:[{word,weight}],sentiment}]</code></p></div>\n\t\n\t", "relations": [["arguments", ["query"]], ["defined", "eq.core.Connector"], ["defines", "getTopics", "eq.core.Connector.getTopics"]], "representation": "<span class='name'>getTopics</span><span class='arguments'><span class='argument'>query</span></span>", "type": "function", "id": "eq.core.Connector.getTopics"}], ["_registerTopics", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='137'><p class='TEXTO N2' ostart='0' oend='137'>Registers the given topics in the TOPICS_CACHE cache so that the application can easily translate an topic id to its corresponding label.</p></div>\n\t\n\t", "relations": [["arguments", ["topics"]], ["defined", "eq.core.Connector"], ["defines", "_registerTopics", "eq.core.Connector._registerTopics"]], "representation": "<span class='name'>_registerTopics</span><span class='arguments'><span class='argument'>topics</span></span>", "type": "function", "id": "eq.core.Connector._registerTopics"}], ["_registerMIDs", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='135'><p class='TEXTO N2' ostart='0' oend='135'>Registers the given topics in the MIDS_CACHE cache so that the application can easily translate an topic id to its corresponding label.</p></div>\n\t\n\t", "relations": [["arguments", ["mids"]], ["defined", "eq.core.Connector"], ["defines", "_registerMIDs", "eq.core.Connector._registerMIDs"]], "representation": "<span class='name'>_registerMIDs</span><span class='arguments'><span class='argument'>mids</span></span>", "type": "function", "id": "eq.core.Connector._registerMIDs"}], ["queryEndpoint", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='216'><p class='TEXTO N2' ostart='0' oend='216'>Queries the endpoint with the given <code>name</code> and <code>parameters</code>. The request will be cached and reused within the next <code>expires</code> ms. This method implements a local session cache in addition to a persistent storage cache.</p></div>\n\t\n\t", "relations": [["arguments", ["name", "query", "normalizer", "expires"]], ["defined", "eq.core.Connector"], ["defines", "queryEndpoint", "eq.core.Connector.queryEndpoint"]], "representation": "<span class='name'>queryEndpoint</span><span class='arguments'><span class='argument'>name</span><span class='argument'>query</span><span class='argument'>normalizer</span><span class='argument'>expires</span></span>", "type": "function", "id": "eq.core.Connector.queryEndpoint"}], ["getAuthentication", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='142'><p class='TEXTO N2' ostart='0' oend='142'>Finds the authentication url from the response and navigates to it. when the user gets authenticated it will navigate back to the application.</p></div>\n\t\n\t", "relations": [["arguments", ["res"]], ["defined", "eq.core.Connector"], ["defines", "getAuthentication", "eq.core.Connector.getAuthentication"]], "representation": "<span class='name'>getAuthentication</span><span class='arguments'><span class='argument'>res</span></span>", "type": "function", "id": "eq.core.Connector.getAuthentication"}], ["getNormalizedQuery", {"representation": "<span class='name'>getNormalizedQuery</span><span class='arguments'><span class='argument'>query</span></span>", "type": "function", "id": "eq.core.Connector.getNormalizedQuery", "relations": [["arguments", ["query"]], ["defined", "eq.core.Connector"], ["defines", "getNormalizedQuery", "eq.core.Connector.getNormalizedQuery"]], "tags": ["method"]}], ["_normalizeQuery", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='249'><p class='TEXTO N2' ostart='0' oend='175'>Convert an <code>API getQuery()</code> structure to the URL format required by the API endpoint. This will remove the unnecessary query parameters and normalize the values of the others.</p><p class='TEXTO N4' ostart='177' oend='249'>This also ensures that the query parameters are always in the same order</p></div>\n\t\n\t", "relations": [["arguments", ["query"]], ["defined", "eq.core.Connector"], ["defines", "_normalizeQuery", "eq.core.Connector._normalizeQuery"]], "representation": "<span class='name'>_normalizeQuery</span><span class='arguments'><span class='argument'>query</span></span>", "type": "function", "id": "eq.core.Connector._normalizeQuery"}], ["_normalizeQueryParameter", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='86'><p class='TEXTO N2' ostart='0' oend='86'>Normalizes the given query parameter so that it matches Google Google EQ's API format.</p></div>\n\t\n\t", "relations": [["arguments", ["name", "value"]], ["defined", "eq.core.Connector"], ["defines", "_normalizeQueryParameter", "eq.core.Connector._normalizeQueryParameter"]], "representation": "<span class='name'>_normalizeQueryParameter</span><span class='arguments'><span class='argument'>name</span><span class='argument'>value</span></span>", "type": "function", "id": "eq.core.Connector._normalizeQueryParameter"}], ["getTimeScale", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='98'><p class='TEXTO N2' ostart='0' oend='98'>Returns the scale of the given period, being either &ldquo;<span class='quote'>hours\", \"days\", \"weeks\", \"months\" or \"years</span>&rdquo;.</p></div>\n\t\n\t", "relations": [["arguments", ["period"]], ["defined", "eq.core.Connector"], ["defines", "getTimeScale", "eq.core.Connector.getTimeScale"]], "representation": "<span class='name'>getTimeScale</span><span class='arguments'><span class='argument'>period</span></span>", "type": "function", "id": "eq.core.Connector.getTimeScale"}], ["getRecentQueries", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='23'><p class='TEXTO N2' ostart='0' oend='23'>Gets the recent queries</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.Connector"], ["defines", "getRecentQueries", "eq.core.Connector.getRecentQueries"]], "representation": "<span class='name'>getRecentQueries</span><span class='arguments'></span>", "type": "function", "id": "eq.core.Connector.getRecentQueries"}], ["addRecentQuery", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='50'><p class='TEXTO N2' ostart='0' oend='50'>Adds the given query to the list of recent queries</p></div>\n\t\n\t", "relations": [["arguments", ["query", "count"]], ["defined", "eq.core.Connector"], ["defines", "addRecentQuery", "eq.core.Connector.addRecentQuery"]], "representation": "<span class='name'>addRecentQuery</span><span class='arguments'><span class='argument'>query</span><span class='argument'>count</span></span>", "type": "function", "id": "eq.core.Connector.addRecentQuery"}]], "relations": [["defined", "eq.core"], ["defines", "Connector", "eq.core.Connector"]], "id": "eq.core.Connector"}], ["Main", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='219'><p class='TEXTO N2' ostart='0' oend='150'>This is the container for the Main page of the application. It doesn't have many responsabilities since the complexity is, contained within the cards.</p><p class='TEXTO N3' ostart='152' oend='219'>Responsibilities: - Hide/show the Main page (with a nice animation)</p></div>\n\t\n\t", "type": "class", "children": [["UIS", {"id": "eq.core.Main.UIS", "type": "value", "name": "UIS", "relations": [["defined", "eq.core.Main"], ["defines", "UIS", "eq.core.Main.UIS"]], "tags": ["class attribute"]}], ["onActivate", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='74'><p class='TEXTO N2' ostart='0' oend='74'>Overrides <code>Widget.onActivate</code> simply show the cards with a nice animation.</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.Main"], ["defines", "onActivate", "eq.core.Main.onActivate"]], "representation": "<span class='name'>onActivate</span><span class='arguments'></span>", "type": "function", "id": "eq.core.Main.onActivate"}], ["onDeactivate", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='54'><p class='TEXTO N2' ostart='0' oend='54'>Overrides <code>Widget.onDeactivate</code> Simply hides the cards</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.Main"], ["defines", "onDeactivate", "eq.core.Main.onDeactivate"]], "representation": "<span class='name'>onDeactivate</span><span class='arguments'></span>", "type": "function", "id": "eq.core.Main.onDeactivate"}]], "relations": [["defined", "eq.core"], ["defines", "Main", "eq.core.Main"]], "id": "eq.core.Main"}], ["Application", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='196'><p class='TEXTO N2' ostart='0' oend='55'>This is the global container for the whole application.</p><p class='TEXTO N3' ostart='57' oend='74'>Responsibilities:</p><ul class='TEXTO N4' ostart='74' oend='196'><li class='TEXTO N5' ostart='74' oend='102'>Manage the window scroll </li><li class='TEXTO N6' ostart='102' oend='125'>loading initial data </li><li class='TEXTO N7' ostart='125' oend='157'>Manage the definition tooltip </li><li class='TEXTO N8' ostart='157' oend='196'>Provide user event tracking wrappers</li></ul></div>\n\t\n\t", "type": "class", "children": [["UIS", {"id": "eq.core.Application.UIS", "type": "value", "name": "UIS", "relations": [["defined", "eq.core.Application"], ["defines", "UIS", "eq.core.Application.UIS"]], "tags": ["class attribute"]}], ["handlers", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='263'><p class='TEXTO N2' ostart='0' oend='263'><a class=\"anchor\" name=\"property\"></a> description| ---------------|-----------------------------------------------<a class=\"anchor\" name=\"\"></a> <code>document</code> <a class=\"anchor\" name=\"handles_the_scroll_of_the_document\"></a> | <code>definition</code> | handles the mouse In/out on elements with definitions|</p></div>\n\t\n\t", "type": "value", "name": "handlers", "relations": [["defined", "eq.core.Application"], ["defines", "handlers", "eq.core.Application.handlers"]], "id": "eq.core.Application.handlers"}], ["definitionTooltip", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='27'><ul class='TEXTO N2' ostart='0' oend='27'><li class='TEXTO N3' ostart='0' oend='27'>type: <code>DefinitionTooltip</code></li></ul></div>\n\t\n\t", "type": "value", "name": "definitionTooltip", "relations": [["defined", "eq.core.Application"], ["defines", "definitionTooltip", "eq.core.Application.definitionTooltip"]], "id": "eq.core.Application.definitionTooltip"}], ["cache", {"documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='202'><p class='TEXTO N2' ostart='0' oend='202'><a class=\"anchor\" name=\"property\"></a> description| --------------|-----------------------------------------------<a class=\"anchor\" name=\"\"></a> <code>scrollTween</code> <a class=\"anchor\" name=\"the_tween_that_manages_the_animation_of_the_scroll\"></a></p></div>\n\t\n\t", "type": "value", "name": "cache", "relations": [["defined", "eq.core.Application"], ["defines", "cache", "eq.core.Application.cache"]], "id": "eq.core.Application.cache"}], ["bindUI", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='30'><p class='TEXTO N2' ostart='0' oend='30'>Overrides <code>Application.bindUI</code></p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.Application"], ["defines", "bindUI", "eq.core.Application.bindUI"]], "representation": "<span class='name'>bindUI</span><span class='arguments'></span>", "type": "function", "id": "eq.core.Application.bindUI"}], ["bindUISWithDefinitions", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='67'><p class='TEXTO N2' ostart='0' oend='67'>Binds the event handlers to all the DOMNodes that have a definition</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.Application"], ["defines", "bindUISWithDefinitions", "eq.core.Application.bindUISWithDefinitions"]], "representation": "<span class='name'>bindUISWithDefinitions</span><span class='arguments'></span>", "type": "function", "id": "eq.core.Application.bindUISWithDefinitions"}], ["loadData", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='55'><p class='TEXTO N2' ostart='0' oend='55'>Overrides <code>Application.loadData</code> Return Value: <code>Future</code></p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.Application"], ["defines", "loadData", "eq.core.Application.loadData"]], "representation": "<span class='name'>loadData</span><span class='arguments'></span>", "type": "function", "id": "eq.core.Application.loadData"}], ["_loadStart", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='50'><p class='TEXTO N2' ostart='0' oend='50'>Helper function for when we start loading the data</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.Application"], ["defines", "_loadStart", "eq.core.Application._loadStart"]], "representation": "<span class='name'>_loadStart</span><span class='arguments'></span>", "type": "function", "id": "eq.core.Application._loadStart"}], ["_loadEnd", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='49'><p class='TEXTO N2' ostart='0' oend='49'>Helper function for when we stop loading the data</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.Application"], ["defines", "_loadEnd", "eq.core.Application._loadEnd"]], "representation": "<span class='name'>_loadEnd</span><span class='arguments'></span>", "type": "function", "id": "eq.core.Application._loadEnd"}], ["trackEvent", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='32'><p class='TEXTO N2' ostart='0' oend='32'>Wrapper for <code>Tracker.trackEvent</code></p></div>\n\t\n\t", "relations": [["arguments", ["category", "action", "label", "value", "fields"]], ["defined", "eq.core.Application"], ["defines", "trackEvent", "eq.core.Application.trackEvent"]], "representation": "<span class='name'>trackEvent</span><span class='arguments'><span class='argument'>category</span><span class='argument'>action</span><span class='argument'>label</span><span class='argument'>value</span><span class='argument'>fields</span></span>", "type": "function", "id": "eq.core.Application.trackEvent"}], ["trackMetric", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='33'><p class='TEXTO N2' ostart='0' oend='33'>Wrapper for <code>Tracker.trackMetric</code></p></div>\n\t\n\t", "relations": [["arguments", ["name", "value"]], ["defined", "eq.core.Application"], ["defines", "trackMetric", "eq.core.Application.trackMetric"]], "representation": "<span class='name'>trackMetric</span><span class='arguments'><span class='argument'>name</span><span class='argument'>value</span></span>", "type": "function", "id": "eq.core.Application.trackMetric"}], ["trackTiming", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='33'><p class='TEXTO N2' ostart='0' oend='33'>Wrapper for <code>Tracker.trackTiming</code></p></div>\n\t\n\t", "relations": [["arguments", ["category", "variable", "value", "label"]], ["defined", "eq.core.Application"], ["defines", "trackTiming", "eq.core.Application.trackTiming"]], "representation": "<span class='name'>trackTiming</span><span class='arguments'><span class='argument'>category</span><span class='argument'>variable</span><span class='argument'>value</span><span class='argument'>label</span></span>", "type": "function", "id": "eq.core.Application.trackTiming"}], ["onTermWithDefinitionIn", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='65'><p class='TEXTO N2' ostart='0' oend='65'>Handler for when the user hovers over a DOMNode with a definition</p></div>\n\t\n\t", "relations": [["arguments", ["event"]], ["defined", "eq.core.Application"], ["defines", "onTermWithDefinitionIn", "eq.core.Application.onTermWithDefinitionIn"]], "representation": "<span class='name'>onTermWithDefinitionIn</span><span class='arguments'><span class='argument'>event</span></span>", "type": "function", "id": "eq.core.Application.onTermWithDefinitionIn"}], ["onTermWithDefinitionOut", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='67'><p class='TEXTO N2' ostart='0' oend='67'>Handler for when the user hovers off of a DOMNode with a definition</p></div>\n\t\n\t", "relations": [["arguments", ["event"]], ["defined", "eq.core.Application"], ["defines", "onTermWithDefinitionOut", "eq.core.Application.onTermWithDefinitionOut"]], "representation": "<span class='name'>onTermWithDefinitionOut</span><span class='arguments'><span class='argument'>event</span></span>", "type": "function", "id": "eq.core.Application.onTermWithDefinitionOut"}], ["onMouseWheel", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='144'><p class='TEXTO N2' ostart='0' oend='144'>Handler for mouse wheel, we just stop the scroll tween so the user doesn't have to &ldquo;<span class='quote'>fight</span>&rdquo; it. NOTE: This can probably be merged with <code>onScroll</code></p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.Application"], ["defines", "onMouseWheel", "eq.core.Application.onMouseWheel"]], "representation": "<span class='name'>onMouseWheel</span><span class='arguments'></span>", "type": "function", "id": "eq.core.Application.onMouseWheel"}], ["onScroll", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='87'><p class='TEXTO N2' ostart='0' oend='87'>Handler for the document scroll. We determine if the navigation should be fixed or not.</p></div>\n\t\n\t", "relations": [["arguments", []], ["defined", "eq.core.Application"], ["defines", "onScroll", "eq.core.Application.onScroll"]], "representation": "<span class='name'>onScroll</span><span class='arguments'></span>", "type": "function", "id": "eq.core.Application.onScroll"}], ["scrollToAnchor", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='51'><p class='TEXTO N2' ostart='0' oend='51'>Scroll the document to the anchor with a given name</p></div>\n\t\n\t", "relations": [["arguments", ["name"]], ["defined", "eq.core.Application"], ["defines", "scrollToAnchor", "eq.core.Application.scrollToAnchor"]], "representation": "<span class='name'>scrollToAnchor</span><span class='arguments'><span class='argument'>name</span></span>", "type": "function", "id": "eq.core.Application.scrollToAnchor"}], ["scrollTo", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='62'><p class='TEXTO N2' ostart='0' oend='62'>Scroll the document to a specific offset, optionally animating</p></div>\n\t\n\t", "relations": [["arguments", ["position", "animated"]], ["defined", "eq.core.Application"], ["defines", "scrollTo", "eq.core.Application.scrollTo"]], "representation": "<span class='name'>scrollTo</span><span class='arguments'><span class='argument'>position</span><span class='argument'>animated</span></span>", "type": "function", "id": "eq.core.Application.scrollTo"}], ["onURLStateChanged", {"tags": ["method"], "documentation": "\t\n\t<div class='TEXTO N1' ostart='0' oend='41'><p class='TEXTO N2' ostart='0' oend='41'>Overrides <code>Application.onURLStateChanged</code></p></div>\n\t\n\t", "relations": [["arguments", ["event"]], ["defined", "eq.core.Application"], ["defines", "onURLStateChanged", "eq.core.Application.onURLStateChanged"]], "representation": "<span class='name'>onURLStateChanged</span><span class='arguments'><span class='argument'>event</span></span>", "type": "function", "id": "eq.core.Application.onURLStateChanged"}]], "relations": [["defined", "eq.core"], ["defines", "Application", "eq.core.Application"]], "id": "eq.core.Application"}], ["registerFormats", {"representation": "<span class='name'>registerFormats</span><span class='arguments'></span>", "type": "function", "id": "eq.core.registerFormats", "relations": [["arguments", []], ["defined", "eq.core"], ["defines", "registerFormats", "eq.core.registerFormats"]], "tags": ["function"]}], ["start", {"representation": "<span class='name'>start</span><span class='arguments'></span>", "type": "function", "id": "eq.core.start", "relations": [["arguments", []], ["defined", "eq.core"], ["defines", "start", "eq.core.start"]], "tags": ["function"]}], ["__moduleinit__", {"representation": "<span class='name'>__moduleinit__</span><span class='arguments'></span>", "type": "function", "id": "eq.core.__moduleinit__", "relations": [["arguments", []], ["defined", "eq.core"], ["defines", "__moduleinit__", "eq.core.__moduleinit__"]], "tags": ["function"]}]], "id": "eq.core"}]]});</script>
  </body>
</html>